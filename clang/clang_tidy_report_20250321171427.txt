738 warnings generated.
include/csv.h:42:32: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
   42 |         for (Pchar p = to; (*p = *from) != '\0'; ++p, ++from);
      |                                ^
src/attendancelist.cpp:327:9: note: Calling 'multitype::assign'
  327 |         __attendancelist_filter_studentID.assign(studentID);
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:125:13: note: Taking false branch
  125 |             if (e.is_type("int"))
      |             ^
include/csv.h:127:13: note: Taking false branch
  127 |             if (e.is_type("long"))
      |             ^
include/csv.h:129:13: note: Taking false branch
  129 |             if (e.is_type("char"))
      |             ^
include/csv.h:131:13: note: Taking true branch
  131 |             if (e.is_type("str"))
      |             ^
include/csv.h:132:29: note: Calling 'multitype::to_str'
  132 |                 string_copy(e.to_str(), values._tpchar);
      |                             ^~~~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking true branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:295:29: note: Storing uninitialized value
  295 |                 Pchar buf = new Char[2];
      |                             ^~~~~~~~~~~
include/csv.h:132:29: note: Returning from 'multitype::to_str'
  132 |                 string_copy(e.to_str(), values._tpchar);
      |                             ^~~~~~~~~~
include/csv.h:132:17: note: Calling 'string_copy'
  132 |                 string_copy(e.to_str(), values._tpchar);
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:42:28: note: Assuming the condition is true
   42 |         for (Pchar p = to; (*p = *from) != '\0'; ++p, ++from);
      |                            ^~~~~~~~~~~~~~~~~~~~
include/csv.h:42:9: note: Loop condition is true.  Entering loop body
   42 |         for (Pchar p = to; (*p = *from) != '\0'; ++p, ++from);
      |         ^
include/csv.h:42:32: note: Assigned value is garbage or undefined
   42 |         for (Pchar p = to; (*p = *from) != '\0'; ++p, ++from);
      |                                ^ ~~~~~
include/csv.h:133:17: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
  133 |             if (e.is_type("double"))
      |                 ^
src/attendancelist.cpp:327:9: note: Calling 'multitype::assign'
  327 |         __attendancelist_filter_studentID.assign(studentID);
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:125:13: note: Taking false branch
  125 |             if (e.is_type("int"))
      |             ^
include/csv.h:127:13: note: Taking false branch
  127 |             if (e.is_type("long"))
      |             ^
include/csv.h:129:13: note: Taking false branch
  129 |             if (e.is_type("char"))
      |             ^
include/csv.h:131:13: note: Taking true branch
  131 |             if (e.is_type("str"))
      |             ^
include/csv.h:132:29: note: Calling 'multitype::to_str'
  132 |                 string_copy(e.to_str(), values._tpchar);
      |                             ^~~~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking false branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:299:13: note: Taking false branch
  299 |             if (is_type("str"))
      |             ^
include/csv.h:301:13: note: Taking false branch
  301 |             if (is_type("double"))
      |             ^
include/csv.h:328:16: note: Memory is allocated
  328 |                         Pchar buf = new Char[1]; buf[0] = '\0';
      |                                     ^~~~~~~~~~~
include/csv.h:132:29: note: Returned allocated memory
  132 |                 string_copy(e.to_str(), values._tpchar);
      |                             ^~~~~~~~~~
include/csv.h:133:17: note: Potential memory leak
  133 |             if (e.is_type("double"))
      |                 ^
include/csv.h:175:60: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                                                            ^
src/attendancelist.cpp:329:32: note: Calling 'multitype::append'
  329 |                                Csv::multitype("Check-in list of ").append(studentID));
      |                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:171:25: note: Calling 'multitype::to_str'
  171 |             Char *cur = to_str(),
      |                         ^~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking false branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:299:13: note: Taking false branch
  299 |             if (is_type("str"))
      |             ^
include/csv.h:301:13: note: Taking false branch
  301 |             if (is_type("double"))
      |             ^
include/csv.h:328:16: note: Storing uninitialized value
  328 |                         Pchar buf = new Char[1]; buf[0] = '\0';
      |                                     ^~~~~~~~~~~
include/csv.h:171:25: note: Returning from 'multitype::to_str'
  171 |             Char *cur = to_str(),
      |                         ^~~~~~~~
include/csv.h:175:29: note: Assuming the condition is true
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:175:13: note: Loop condition is true.  Entering loop body
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |             ^
include/csv.h:175:29: note: Assuming the condition is true
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:175:13: note: Loop condition is true.  Entering loop body
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |             ^
include/csv.h:175:60: note: Assigned value is garbage or undefined
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                                                            ^ ~~~~~~~~
include/csv.h:176:26: warning: Potential leak of memory pointed to by 'cur' [clang-analyzer-cplusplus.NewDeleteLeaks]
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                          ^
src/attendancelist.cpp:329:32: note: Calling 'multitype::append'
  329 |                                Csv::multitype("Check-in list of ").append(studentID));
      |                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:171:25: note: Calling 'multitype::to_str'
  171 |             Char *cur = to_str(),
      |                         ^~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking false branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:299:13: note: Taking false branch
  299 |             if (is_type("str"))
      |             ^
include/csv.h:301:13: note: Taking false branch
  301 |             if (is_type("double"))
      |             ^
include/csv.h:328:16: note: Memory is allocated
  328 |                         Pchar buf = new Char[1]; buf[0] = '\0';
      |                                     ^~~~~~~~~~~
include/csv.h:171:25: note: Returned allocated memory
  171 |             Char *cur = to_str(),
      |                         ^~~~~~~~
include/csv.h:175:29: note: Assuming the condition is false
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:175:13: note: Loop condition is false. Execution continues on line 176
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |             ^
include/csv.h:176:26: note: Potential leak of memory pointed to by 'cur'
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                          ^
include/csv.h:176:60: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                                                            ^
src/attendancelist.cpp:329:32: note: Calling 'multitype::append'
  329 |                                Csv::multitype("Check-in list of ").append(studentID));
      |                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:172:25: note: Calling 'multitype::to_str'
  172 |                  *app = e.to_str(),
      |                         ^~~~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking false branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:299:13: note: Taking false branch
  299 |             if (is_type("str"))
      |             ^
include/csv.h:301:13: note: Taking false branch
  301 |             if (is_type("double"))
      |             ^
include/csv.h:328:16: note: Storing uninitialized value
  328 |                         Pchar buf = new Char[1]; buf[0] = '\0';
      |                                     ^~~~~~~~~~~
include/csv.h:172:25: note: Returning from 'multitype::to_str'
  172 |                  *app = e.to_str(),
      |                         ^~~~~~~~~~
include/csv.h:175:29: note: Assuming the condition is false
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:175:13: note: Loop condition is false. Execution continues on line 176
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |             ^
include/csv.h:176:29: note: Assuming the condition is true
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:176:13: note: Loop condition is true.  Entering loop body
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |             ^
include/csv.h:176:29: note: Assuming the condition is true
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:176:13: note: Loop condition is true.  Entering loop body
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |             ^
include/csv.h:176:60: note: Assigned value is garbage or undefined
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                                                            ^ ~~~~~~~~
include/csv.h:177:22: warning: Potential leak of memory pointed to by 'app' [clang-analyzer-cplusplus.NewDeleteLeaks]
  177 |             res[j] = '\0';
      |                      ^
src/attendancelist.cpp:329:32: note: Calling 'multitype::append'
  329 |                                Csv::multitype("Check-in list of ").append(studentID));
      |                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:172:25: note: Calling 'multitype::to_str'
  172 |                  *app = e.to_str(),
      |                         ^~~~~~~~~~
include/csv.h:281:13: note: Taking true branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:283:29: note: Memory is allocated
  283 |                 Pchar buf = new Char[STR_BUFFER];
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:172:25: note: Returned allocated memory
  172 |                  *app = e.to_str(),
      |                         ^~~~~~~~~~
include/csv.h:175:29: note: Assuming the condition is false
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:175:13: note: Loop condition is false. Execution continues on line 176
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |             ^
include/csv.h:176:29: note: Assuming the condition is false
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:176:13: note: Loop condition is false. Execution continues on line 177
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |             ^
include/csv.h:177:22: note: Potential leak of memory pointed to by 'app'
  177 |             res[j] = '\0';
      |                      ^
include/csv.h:385:17: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
  385 |                 return strcmp(to_str(), e.to_str()) == 0;
      |                 ^
src/attendancelist.cpp:328:32: note: Calling 'table::filter'
  328 |         Interface::print_table(attendancelist.get_table().filter(__attendancelist_filter_studentID_view_mode_func),
      |                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:872:29: note: Assuming 'i' is < 'Nrows'
  872 |             for (int i = 0; i < Nrows; ++i)
      |                             ^~~~~~~~~
include/csv.h:872:13: note: Loop condition is true.  Entering loop body
  872 |             for (int i = 0; i < Nrows; ++i)
      |             ^
include/csv.h:873:17: note: Loop condition is true.  Entering loop body
  873 |                 for (int j = 0; j < Nkeys; ++j)
      |                 ^
include/csv.h:874:25: note: Calling '__attendancelist_filter_studentID_view_mode_func'
  874 |                     if (_filter_func(get_keys().at(j), get_row(i), (*this)))
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/attendancelist.cpp:19:12: note: Left side of '&&' is true
   19 |     return !column.equal("Attendance ID") && !column.equal("Student ID") &&
      |            ^
src/attendancelist.cpp:19:47: note: Calling 'multitype::equal'
   19 |     return !column.equal("Attendance ID") && !column.equal("Student ID") &&
      |                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:382:13: note: Taking false branch
  382 |             if (is_type(e.type()))
      |             ^
include/csv.h:384:32: note: Left side of '||' is true
  384 |             if (is_type("str") || e.is_type("str"))
      |                                ^
include/csv.h:385:31: note: Calling 'multitype::to_str'
  385 |                 return strcmp(to_str(), e.to_str()) == 0;
      |                               ^~~~~~~~
include/csv.h:281:13: note: Taking true branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:283:29: note: Memory is allocated
  283 |                 Pchar buf = new Char[STR_BUFFER];
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:385:31: note: Returned allocated memory
  385 |                 return strcmp(to_str(), e.to_str()) == 0;
      |                               ^~~~~~~~
include/csv.h:385:24: note: Assuming the condition is false
  385 |                 return strcmp(to_str(), e.to_str()) == 0;
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:385:17: note: Potential memory leak
  385 |                 return strcmp(to_str(), e.to_str()) == 0;
      |                 ^
include/csv.h:404:17: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
  404 |                 return strcmp(values._tpchar, e.to_str()) == 0;
      |                 ^
src/attendancelist.cpp:328:32: note: Calling 'table::filter'
  328 |         Interface::print_table(attendancelist.get_table().filter(__attendancelist_filter_studentID_view_mode_func),
      |                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:872:29: note: Assuming 'i' is < 'Nrows'
  872 |             for (int i = 0; i < Nrows; ++i)
      |                             ^~~~~~~~~
include/csv.h:872:13: note: Loop condition is true.  Entering loop body
  872 |             for (int i = 0; i < Nrows; ++i)
      |             ^
include/csv.h:873:17: note: Loop condition is true.  Entering loop body
  873 |                 for (int j = 0; j < Nkeys; ++j)
      |                 ^
include/csv.h:874:25: note: Calling '__attendancelist_filter_studentID_view_mode_func'
  874 |                     if (_filter_func(get_keys().at(j), get_row(i), (*this)))
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/attendancelist.cpp:19:12: note: Left side of '&&' is true
   19 |     return !column.equal("Attendance ID") && !column.equal("Student ID") &&
      |            ^
src/attendancelist.cpp:19:46: note: Assuming the condition is true
   19 |     return !column.equal("Attendance ID") && !column.equal("Student ID") &&
      |                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/attendancelist.cpp:19:12: note: Left side of '&&' is true
   19 |     return !column.equal("Attendance ID") && !column.equal("Student ID") &&
      |            ^
src/attendancelist.cpp:20:19: note: Calling 'table::get_key'
   20 |            row.at(tabl.get_key("Student ID")).equal(__attendancelist_filter_studentID);
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:632:29: note: Assuming the condition is true
  632 |             for (Int i = 0; i < keys.size(); ++i)
      |                             ^~~~~~~~~~~~~~~
include/csv.h:632:13: note: Loop condition is true.  Entering loop body
  632 |             for (Int i = 0; i < keys.size(); ++i)
      |             ^
include/csv.h:633:21: note: Calling 'multitype::strict_equal'
  633 |                 if (e.strict_equal(keys.at(i)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:395:13: note: Taking false branch
  395 |             if (!is_type(e.type()))
      |             ^
include/csv.h:397:13: note: Taking false branch
  397 |             if (is_type("int"))
      |             ^
include/csv.h:399:13: note: Taking false branch
  399 |             if (is_type("long"))
      |             ^
include/csv.h:401:13: note: Taking false branch
  401 |             if (is_type("char"))
      |             ^
include/csv.h:403:13: note: Taking true branch
  403 |             if (is_type("str"))
      |             ^
include/csv.h:404:47: note: Calling 'multitype::to_str'
  404 |                 return strcmp(values._tpchar, e.to_str()) == 0;
      |                                               ^~~~~~~~~~
include/csv.h:281:13: note: Taking true branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:283:29: note: Memory is allocated
  283 |                 Pchar buf = new Char[STR_BUFFER];
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:404:47: note: Returned allocated memory
  404 |                 return strcmp(values._tpchar, e.to_str()) == 0;
      |                                               ^~~~~~~~~~
include/csv.h:404:24: note: Assuming the condition is false
  404 |                 return strcmp(values._tpchar, e.to_str()) == 0;
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:404:17: note: Potential memory leak
  404 |                 return strcmp(values._tpchar, e.to_str()) == 0;
      |                 ^
include/csv.h:880:26: warning: Potential leak of memory pointed to by 'markCol' [clang-analyzer-cplusplus.NewDeleteLeaks]
  880 |             for (int i = 0; i < Nrows; ++i)
      |                          ^
src/attendancelist.cpp:328:32: note: Calling 'table::filter'
  328 |         Interface::print_table(attendancelist.get_table().filter(__attendancelist_filter_studentID_view_mode_func),
      |                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:869:57: note: Memory is allocated
  869 |             bool *markRow = new bool[Nrows], *markCol = new bool[Nkeys];
      |                                                         ^~~~~~~~~~~~~~~
include/csv.h:872:29: note: Assuming 'i' is >= 'Nrows'
  872 |             for (int i = 0; i < Nrows; ++i)
      |                             ^~~~~~~~~
include/csv.h:872:13: note: Loop condition is false. Execution continues on line 876
  872 |             for (int i = 0; i < Nrows; ++i)
      |             ^
include/csv.h:877:13: note: Loop condition is false. Execution continues on line 880
  877 |             for (int i = 0; i < Nkeys; ++i)
      |             ^
include/csv.h:880:26: note: Potential leak of memory pointed to by 'markCol'
  880 |             for (int i = 0; i < Nrows; ++i)
      |                          ^
include/csv.h:887:20: warning: Potential leak of memory pointed to by 'markRow' [clang-analyzer-cplusplus.NewDeleteLeaks]
  887 |             return new_table;
      |                    ^
src/attendancelist.cpp:328:32: note: Calling 'table::filter'
  328 |         Interface::print_table(attendancelist.get_table().filter(__attendancelist_filter_studentID_view_mode_func),
      |                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:869:29: note: Memory is allocated
  869 |             bool *markRow = new bool[Nrows], *markCol = new bool[Nkeys];
      |                             ^~~~~~~~~~~~~~~
include/csv.h:872:29: note: Assuming 'i' is >= 'Nrows'
  872 |             for (int i = 0; i < Nrows; ++i)
      |                             ^~~~~~~~~
include/csv.h:872:13: note: Loop condition is false. Execution continues on line 876
  872 |             for (int i = 0; i < Nrows; ++i)
      |             ^
include/csv.h:877:13: note: Loop condition is false. Execution continues on line 880
  877 |             for (int i = 0; i < Nkeys; ++i)
      |             ^
include/csv.h:880:29: note: 'i' is >= 'Nrows'
  880 |             for (int i = 0; i < Nrows; ++i)
      |                             ^
include/csv.h:880:13: note: Loop condition is false. Execution continues on line 887
  880 |             for (int i = 0; i < Nrows; ++i)
      |             ^
include/csv.h:887:20: note: Potential leak of memory pointed to by 'markRow'
  887 |             return new_table;
      |                    ^
include/csv.h:948:13: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
  948 |             string_copy(_filename, filename);
      |             ^
src/attendancelist.cpp:110:25: note: Assuming 'i' is >= 'Nrows'
  110 |         for (int i = 0; i < Nrows; ++i)
      |                         ^~~~~~~~~
src/attendancelist.cpp:110:9: note: Loop condition is false. Execution continues on line 112
  110 |         for (int i = 0; i < Nrows; ++i)
      |         ^
src/attendancelist.cpp:118:17: note: Assuming 'chosen' is >= 1
  118 |             if (chosen >= 1 && chosen <= Nrows)
      |                 ^~~~~~~~~~~
src/attendancelist.cpp:118:17: note: Left side of '&&' is true
src/attendancelist.cpp:118:32: note: Assuming 'chosen' is <= 'Nrows'
  118 |             if (chosen >= 1 && chosen <= Nrows)
      |                                ^~~~~~~~~~~~~~~
src/attendancelist.cpp:118:13: note: Taking true branch
  118 |             if (chosen >= 1 && chosen <= Nrows)
      |             ^
src/attendancelist.cpp:124:34: note: Calling constructor for 'csv_handler'
  124 |                 Csv::csv_handler out(csv_fname.to_str());
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:945:9: note: Calling default constructor for 'table'
  945 |         csv_handler (const Pchar _filename)
      |         ^~~~~~~~~~~
include/csv.h:594:20: note: Memory is allocated
  594 |             rows = new plist();
      |                    ^~~~~~~~~~~
include/csv.h:945:9: note: Returning from default constructor for 'table'
  945 |         csv_handler (const Pchar _filename)
      |         ^~~~~~~~~~~
include/csv.h:948:13: note: Potential memory leak
  948 |             string_copy(_filename, filename);
      |             ^
include/csv.h:1052:17: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
 1052 |                 Int countCols = _table.get_row(i).size();
      |                 ^
include/csv.h:29:13: note: expanded from macro 'Int'
   29 | #define Int int
      |             ^
src/attendancelist.cpp:250:9: note: Loop condition is true.  Entering loop body
  250 |         while (true)
      |         ^
src/attendancelist.cpp:253:17: note: Assuming 'chosen' is not equal to 1
  253 |             if (chosen == 1)
      |                 ^~~~~~~~~~~
src/attendancelist.cpp:253:13: note: Taking false branch
  253 |             if (chosen == 1)
      |             ^
src/attendancelist.cpp:256:17: note: Assuming 'chosen' is equal to 2
  256 |             if (chosen == 2)
      |                 ^~~~~~~~~~~
src/attendancelist.cpp:256:13: note: Taking true branch
  256 |             if (chosen == 2)
      |             ^
src/attendancelist.cpp:257:17: note: Calling 'edit_attendance_by_student'
  257 |                 edit_attendance_by_student();
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/attendancelist.cpp:231:9: note: Taking false branch
  231 |         if (students.get_table().get_row_where("Student ID", studentID).empty())
      |         ^
src/attendancelist.cpp:240:9: note: Calling 'edit_attendance_table'
  240 |         edit_attendance_table(attendance_table.filter(__attendancelist_filter_studentID_func));
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/attendancelist.cpp:151:9: note: Taking false branch
  151 |         if (row.empty())
      |         ^
src/attendancelist.cpp:167:13: note: Loop condition is true.  Entering loop body
  167 |             while (true)
      |             ^
src/attendancelist.cpp:170:21: note: Assuming 'chosen' is not equal to 1
  170 |                 if (chosen == 1)
      |                     ^~~~~~~~~~~
src/attendancelist.cpp:170:17: note: Taking false branch
  170 |                 if (chosen == 1)
      |                 ^
src/attendancelist.cpp:182:21: note: Assuming 'chosen' is equal to 2
  182 |                 if (chosen == 2)
      |                     ^~~~~~~~~~~
src/attendancelist.cpp:182:17: note: Taking true branch
  182 |                 if (chosen == 2)
      |                 ^
src/attendancelist.cpp:185:21: note: Taking false branch
  185 |                     if (!attendancelist.init_write())
      |                     ^
src/attendancelist.cpp:187:21: note: Calling 'csv_handler::write_and_terminate'
  187 |                     attendancelist.write_and_terminate();
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:1037:13: note: Taking false branch
 1037 |             if (fptr == nullptr)
      |             ^
include/csv.h:1042:29: note: Assuming 'i' is >= 'countHeads'
 1042 |             for (Int i = 0; i < countHeads; ++i)
      |                             ^~~~~~~~~~~~~~
include/csv.h:1042:13: note: Loop condition is false. Execution continues on line 1047
 1042 |             for (Int i = 0; i < countHeads; ++i)
      |             ^
include/csv.h:1050:29: note: Assuming the condition is true
 1050 |             for (Int i = 0; i < _table.num_rows(); ++i)
      |                             ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:1050:13: note: Loop condition is true.  Entering loop body
 1050 |             for (Int i = 0; i < _table.num_rows(); ++i)
      |             ^
include/csv.h:1052:33: note: Calling 'table::get_row'
 1052 |                 Int countCols = _table.get_row(i).size();
      |                                 ^~~~~~~~~~~~~~~~~
include/csv.h:726:17: note: 'row' is >= 0
  726 |             if (row < 0 || row >= _num_rows)
      |                 ^~~
include/csv.h:726:17: note: Left side of '||' is false
include/csv.h:726:28: note: 'row' is < field '_num_rows'
  726 |             if (row < 0 || row >= _num_rows)
      |                            ^~~
include/csv.h:726:13: note: Taking false branch
  726 |             if (row < 0 || row >= _num_rows)
      |             ^
include/csv.h:729:26: note: Left side of '&&' is false
  729 |             while (row-- && head->next != nullptr)
      |                          ^
include/csv.h:731:11: note: Assuming the condition is false
  731 |                         return head->next != nullptr ? head->next->value : *new list<multitype>();
      |                                ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:731:11: note: '?' condition is false
include/csv.h:731:56: note: Memory is allocated
  731 |                         return head->next != nullptr ? head->next->value : *new list<multitype>();
      |                                                                             ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:1052:33: note: Returned allocated memory
 1052 |                 Int countCols = _table.get_row(i).size();
      |                                 ^~~~~~~~~~~~~~~~~
include/csv.h:1052:17: note: Potential memory leak
 1052 |                 Int countCols = _table.get_row(i).size();
      |                 ^
include/csv.h:29:13: note: expanded from macro 'Int'
   29 | #define Int int
      |             ^
src/attendancelist.cpp:160:36: warning: Potential leak of memory pointed to by 'row' [clang-analyzer-cplusplus.NewDeleteLeaks]
  160 |             Interface::select_menu select;
      |                                    ^
src/attendancelist.cpp:250:9: note: Loop condition is true.  Entering loop body
  250 |         while (true)
      |         ^
src/attendancelist.cpp:253:17: note: Assuming 'chosen' is not equal to 1
  253 |             if (chosen == 1)
      |                 ^~~~~~~~~~~
src/attendancelist.cpp:253:13: note: Taking false branch
  253 |             if (chosen == 1)
      |             ^
src/attendancelist.cpp:256:17: note: Assuming 'chosen' is equal to 2
  256 |             if (chosen == 2)
      |                 ^~~~~~~~~~~
src/attendancelist.cpp:256:13: note: Taking true branch
  256 |             if (chosen == 2)
      |             ^
src/attendancelist.cpp:257:17: note: Calling 'edit_attendance_by_student'
  257 |                 edit_attendance_by_student();
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/attendancelist.cpp:231:9: note: Taking false branch
  231 |         if (students.get_table().get_row_where("Student ID", studentID).empty())
      |         ^
src/attendancelist.cpp:240:9: note: Calling 'edit_attendance_table'
  240 |         edit_attendance_table(attendance_table.filter(__attendancelist_filter_studentID_func));
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/attendancelist.cpp:150:42: note: Calling 'table::get_row_where'
  150 |         Csv::list<Csv::multitype> &row = attendancelist.get_table().get_row_where("Attendance ID", res.at(0));
      |                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:750:17: note: Assuming the condition is true
  750 |             if (key_id == -1)
      |                 ^~~~~~~~~~~~
include/csv.h:750:13: note: Taking true branch
  750 |             if (key_id == -1)
      |             ^
include/csv.h:751:25: note: Memory is allocated
  751 |                 return *new list<multitype>();
      |                         ^~~~~~~~~~~~~~~~~~~~~
src/attendancelist.cpp:150:42: note: Returned allocated memory
  150 |         Csv::list<Csv::multitype> &row = attendancelist.get_table().get_row_where("Attendance ID", res.at(0));
      |                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/attendancelist.cpp:151:9: note: Taking false branch
  151 |         if (row.empty())
      |         ^
src/attendancelist.cpp:160:36: note: Potential leak of memory pointed to by 'row'
  160 |             Interface::select_menu select;
      |                                    ^
src/attendancelist.cpp:239:9: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
  239 |         __attendancelist_filter_studentID.assign(studentID);
      |         ^
src/attendancelist.cpp:250:9: note: Loop condition is true.  Entering loop body
  250 |         while (true)
      |         ^
src/attendancelist.cpp:253:17: note: Assuming 'chosen' is not equal to 1
  253 |             if (chosen == 1)
      |                 ^~~~~~~~~~~
src/attendancelist.cpp:253:13: note: Taking false branch
  253 |             if (chosen == 1)
      |             ^
src/attendancelist.cpp:256:17: note: Assuming 'chosen' is equal to 2
  256 |             if (chosen == 2)
      |                 ^~~~~~~~~~~
src/attendancelist.cpp:256:13: note: Taking true branch
  256 |             if (chosen == 2)
      |             ^
src/attendancelist.cpp:257:17: note: Calling 'edit_attendance_by_student'
  257 |                 edit_attendance_by_student();
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/attendancelist.cpp:231:13: note: Calling 'table::get_row_where'
  231 |         if (students.get_table().get_row_where("Student ID", studentID).empty())
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:750:17: note: Assuming the condition is true
  750 |             if (key_id == -1)
      |                 ^~~~~~~~~~~~
include/csv.h:750:13: note: Taking true branch
  750 |             if (key_id == -1)
      |             ^
include/csv.h:751:25: note: Memory is allocated
  751 |                 return *new list<multitype>();
      |                         ^~~~~~~~~~~~~~~~~~~~~
src/attendancelist.cpp:231:13: note: Returned allocated memory
  231 |         if (students.get_table().get_row_where("Student ID", studentID).empty())
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/attendancelist.cpp:231:9: note: Taking false branch
  231 |         if (students.get_table().get_row_where("Student ID", studentID).empty())
      |         ^
src/attendancelist.cpp:239:9: note: Potential memory leak
  239 |         __attendancelist_filter_studentID.assign(studentID);
      |         ^
src/attendancelist.cpp:271:40: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
  271 |         Csv::table &attendance_table = attendancelist.get_table(),
      |                                        ^
src/attendancelist.cpp:266:42: note: Calling 'table::filter'
  266 |         Csv::table coursestudent_table = coursestudent.get_table().filter(__attendancelist_filter_studentID_func);
      |                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:872:29: note: Assuming 'i' is >= 'Nrows'
  872 |             for (int i = 0; i < Nrows; ++i)
      |                             ^~~~~~~~~
include/csv.h:872:13: note: Loop condition is false. Execution continues on line 876
  872 |             for (int i = 0; i < Nrows; ++i)
      |             ^
include/csv.h:876:19: note: Calling default constructor for 'table'
  876 |             table new_table;
      |                   ^~~~~~~~~
include/csv.h:594:20: note: Memory is allocated
  594 |             rows = new plist();
      |                    ^~~~~~~~~~~
include/csv.h:876:19: note: Returning from default constructor for 'table'
  876 |             table new_table;
      |                   ^~~~~~~~~
include/csv.h:877:29: note: Assuming 'i' is >= 'Nkeys'
  877 |             for (int i = 0; i < Nkeys; ++i)
      |                             ^~~~~~~~~
include/csv.h:877:13: note: Loop condition is false. Execution continues on line 880
  877 |             for (int i = 0; i < Nkeys; ++i)
      |             ^
include/csv.h:880:29: note: 'i' is >= 'Nrows'
  880 |             for (int i = 0; i < Nrows; ++i)
      |                             ^
include/csv.h:880:13: note: Loop condition is false. Execution continues on line 887
  880 |             for (int i = 0; i < Nrows; ++i)
      |             ^
src/attendancelist.cpp:266:42: note: Returned allocated memory
  266 |         Csv::table coursestudent_table = coursestudent.get_table().filter(__attendancelist_filter_studentID_func);
      |                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/attendancelist.cpp:268:9: note: Loop condition is false. Execution continues on line 271
  268 |         for (int i = 0; i < coursestudent_table.num_rows(); ++i)
      |         ^
src/attendancelist.cpp:271:40: note: Potential memory leak
  271 |         Csv::table &attendance_table = attendancelist.get_table(),
      |                                        ^
src/attendancelist.cpp:279:13: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
  279 |             Csv::list<Csv::multitype> row = courses_table.get_row(i);
      |             ^
src/attendancelist.cpp:268:25: note: Assuming the condition is false
  268 |         for (int i = 0; i < coursestudent_table.num_rows(); ++i)
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/attendancelist.cpp:268:9: note: Loop condition is false. Execution continues on line 271
  268 |         for (int i = 0; i < coursestudent_table.num_rows(); ++i)
      |         ^
src/attendancelist.cpp:277:25: note: Assuming 'i' is < 'Nrows'
  277 |         for (int i = 0; i < Nrows; ++i)
      |                         ^~~~~~~~~
src/attendancelist.cpp:277:9: note: Loop condition is true.  Entering loop body
  277 |         for (int i = 0; i < Nrows; ++i)
      |         ^
src/attendancelist.cpp:279:45: note: Calling 'table::get_row'
  279 |             Csv::list<Csv::multitype> row = courses_table.get_row(i);
      |                                             ^~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:726:17: note: 'row' is >= 0
  726 |             if (row < 0 || row >= _num_rows)
      |                 ^~~
include/csv.h:726:17: note: Left side of '||' is false
include/csv.h:726:28: note: 'row' is < field '_num_rows'
  726 |             if (row < 0 || row >= _num_rows)
      |                            ^~~
include/csv.h:726:13: note: Taking false branch
  726 |             if (row < 0 || row >= _num_rows)
      |             ^
include/csv.h:729:26: note: Left side of '&&' is false
  729 |             while (row-- && head->next != nullptr)
      |                          ^
include/csv.h:731:11: note: Assuming the condition is false
  731 |                         return head->next != nullptr ? head->next->value : *new list<multitype>();
      |                                ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:731:11: note: '?' condition is false
include/csv.h:731:56: note: Memory is allocated
  731 |                         return head->next != nullptr ? head->next->value : *new list<multitype>();
      |                                                                             ^~~~~~~~~~~~~~~~~~~~~
src/attendancelist.cpp:279:45: note: Returned allocated memory
  279 |             Csv::list<Csv::multitype> row = courses_table.get_row(i);
      |                                             ^~~~~~~~~~~~~~~~~~~~~~~~
src/attendancelist.cpp:279:13: note: Potential memory leak
  279 |             Csv::list<Csv::multitype> row = courses_table.get_row(i);
      |             ^
src/attendancelist.cpp:323:5: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
  323 |     }
      |     ^
src/attendancelist.cpp:268:9: note: Loop condition is false. Execution continues on line 271
  268 |         for (int i = 0; i < coursestudent_table.num_rows(); ++i)
      |         ^
src/attendancelist.cpp:272:37: note: Calling 'table::filter'
  272 |                     courses_table = courses.get_table().filter(__courses_filter_date_func);
      |                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:872:29: note: Assuming 'i' is >= 'Nrows'
  872 |             for (int i = 0; i < Nrows; ++i)
      |                             ^~~~~~~~~
include/csv.h:872:13: note: Loop condition is false. Execution continues on line 876
  872 |             for (int i = 0; i < Nrows; ++i)
      |             ^
include/csv.h:876:19: note: Calling default constructor for 'table'
  876 |             table new_table;
      |                   ^~~~~~~~~
include/csv.h:594:20: note: Memory is allocated
  594 |             rows = new plist();
      |                    ^~~~~~~~~~~
include/csv.h:876:19: note: Returning from default constructor for 'table'
  876 |             table new_table;
      |                   ^~~~~~~~~
include/csv.h:877:29: note: Assuming 'i' is >= 'Nkeys'
  877 |             for (int i = 0; i < Nkeys; ++i)
      |                             ^~~~~~~~~
include/csv.h:877:13: note: Loop condition is false. Execution continues on line 880
  877 |             for (int i = 0; i < Nkeys; ++i)
      |             ^
include/csv.h:880:29: note: 'i' is >= 'Nrows'
  880 |             for (int i = 0; i < Nrows; ++i)
      |                             ^
include/csv.h:880:13: note: Loop condition is false. Execution continues on line 887
  880 |             for (int i = 0; i < Nrows; ++i)
      |             ^
src/attendancelist.cpp:272:37: note: Returned allocated memory
  272 |                     courses_table = courses.get_table().filter(__courses_filter_date_func);
      |                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/attendancelist.cpp:277:9: note: Loop condition is false. Execution continues on line 288
  277 |         for (int i = 0; i < Nrows; ++i)
      |         ^
src/attendancelist.cpp:294:17: note: Assuming 'chosen' is >= 1
  294 |             if (chosen >= 1 && chosen <= Nrows)
      |                 ^~~~~~~~~~~
src/attendancelist.cpp:294:17: note: Left side of '&&' is true
src/attendancelist.cpp:294:32: note: 'chosen' is > 'Nrows'
  294 |             if (chosen >= 1 && chosen <= Nrows)
      |                                ^~~~~~
src/attendancelist.cpp:294:13: note: Taking false branch
  294 |             if (chosen >= 1 && chosen <= Nrows)
      |             ^
src/attendancelist.cpp:322:16: note: Assuming the condition is false
  322 |         while (chosen != Nrows + 1);
      |                ^~~~~~~~~~~~~~~~~~~
src/attendancelist.cpp:291:9: note: Loop condition is false.  Exiting loop
  291 |         do
      |         ^
src/attendancelist.cpp:323:5: note: Potential memory leak
  323 |     }
      |     ^
Suppressed 720 warnings (720 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
735 warnings generated.
include/csv.h:175:60: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                                                            ^
src/class.cpp:232:9: note: Taking true branch
  232 |         if (import.init_read()==false){
      |         ^
src/class.cpp:233:35: note: Calling 'multitype::append'
  233 |             Interface::print_note(Csv::multitype("Your file '").append(res.at(1)).append("' is corrupted. Please try again."), "Failed");
      |                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:171:25: note: Calling 'multitype::to_str'
  171 |             Char *cur = to_str(),
      |                         ^~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking false branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:299:13: note: Taking false branch
  299 |             if (is_type("str"))
      |             ^
include/csv.h:301:13: note: Taking false branch
  301 |             if (is_type("double"))
      |             ^
include/csv.h:328:16: note: Storing uninitialized value
  328 |                         Pchar buf = new Char[1]; buf[0] = '\0';
      |                                     ^~~~~~~~~~~
include/csv.h:171:25: note: Returning from 'multitype::to_str'
  171 |             Char *cur = to_str(),
      |                         ^~~~~~~~
include/csv.h:175:29: note: Assuming the condition is true
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:175:13: note: Loop condition is true.  Entering loop body
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |             ^
include/csv.h:175:29: note: Assuming the condition is true
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:175:13: note: Loop condition is true.  Entering loop body
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |             ^
include/csv.h:175:60: note: Assigned value is garbage or undefined
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                                                            ^ ~~~~~~~~
include/csv.h:176:26: warning: Potential leak of memory pointed to by 'cur' [clang-analyzer-cplusplus.NewDeleteLeaks]
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                          ^
src/class.cpp:232:9: note: Taking true branch
  232 |         if (import.init_read()==false){
      |         ^
src/class.cpp:233:35: note: Calling 'multitype::append'
  233 |             Interface::print_note(Csv::multitype("Your file '").append(res.at(1)).append("' is corrupted. Please try again."), "Failed");
      |                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:171:25: note: Calling 'multitype::to_str'
  171 |             Char *cur = to_str(),
      |                         ^~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking false branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:299:13: note: Taking false branch
  299 |             if (is_type("str"))
      |             ^
include/csv.h:301:13: note: Taking false branch
  301 |             if (is_type("double"))
      |             ^
include/csv.h:328:16: note: Memory is allocated
  328 |                         Pchar buf = new Char[1]; buf[0] = '\0';
      |                                     ^~~~~~~~~~~
include/csv.h:171:25: note: Returned allocated memory
  171 |             Char *cur = to_str(),
      |                         ^~~~~~~~
include/csv.h:175:29: note: Assuming the condition is false
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:175:13: note: Loop condition is false. Execution continues on line 176
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |             ^
include/csv.h:176:26: note: Potential leak of memory pointed to by 'cur'
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                          ^
include/csv.h:176:60: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                                                            ^
src/class.cpp:232:9: note: Taking true branch
  232 |         if (import.init_read()==false){
      |         ^
src/class.cpp:233:35: note: Calling 'multitype::append'
  233 |             Interface::print_note(Csv::multitype("Your file '").append(res.at(1)).append("' is corrupted. Please try again."), "Failed");
      |                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:172:25: note: Calling 'multitype::to_str'
  172 |                  *app = e.to_str(),
      |                         ^~~~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking false branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:299:13: note: Taking false branch
  299 |             if (is_type("str"))
      |             ^
include/csv.h:301:13: note: Taking false branch
  301 |             if (is_type("double"))
      |             ^
include/csv.h:328:16: note: Storing uninitialized value
  328 |                         Pchar buf = new Char[1]; buf[0] = '\0';
      |                                     ^~~~~~~~~~~
include/csv.h:172:25: note: Returning from 'multitype::to_str'
  172 |                  *app = e.to_str(),
      |                         ^~~~~~~~~~
include/csv.h:175:29: note: Assuming the condition is false
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:175:13: note: Loop condition is false. Execution continues on line 176
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |             ^
include/csv.h:176:29: note: Assuming the condition is true
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:176:13: note: Loop condition is true.  Entering loop body
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |             ^
include/csv.h:176:29: note: Assuming the condition is true
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:176:13: note: Loop condition is true.  Entering loop body
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |             ^
include/csv.h:176:60: note: Assigned value is garbage or undefined
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                                                            ^ ~~~~~~~~
include/csv.h:177:22: warning: Potential leak of memory pointed to by 'app' [clang-analyzer-cplusplus.NewDeleteLeaks]
  177 |             res[j] = '\0';
      |                      ^
src/class.cpp:232:9: note: Taking true branch
  232 |         if (import.init_read()==false){
      |         ^
src/class.cpp:233:35: note: Calling 'multitype::append'
  233 |             Interface::print_note(Csv::multitype("Your file '").append(res.at(1)).append("' is corrupted. Please try again."), "Failed");
      |                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:172:25: note: Calling 'multitype::to_str'
  172 |                  *app = e.to_str(),
      |                         ^~~~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking false branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:299:13: note: Taking false branch
  299 |             if (is_type("str"))
      |             ^
include/csv.h:301:13: note: Taking false branch
  301 |             if (is_type("double"))
      |             ^
include/csv.h:328:16: note: Memory is allocated
  328 |                         Pchar buf = new Char[1]; buf[0] = '\0';
      |                                     ^~~~~~~~~~~
include/csv.h:172:25: note: Returned allocated memory
  172 |                  *app = e.to_str(),
      |                         ^~~~~~~~~~
include/csv.h:175:29: note: Assuming the condition is false
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:175:13: note: Loop condition is false. Execution continues on line 176
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |             ^
include/csv.h:176:29: note: Assuming the condition is false
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:176:13: note: Loop condition is false. Execution continues on line 177
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |             ^
include/csv.h:177:22: note: Potential leak of memory pointed to by 'app'
  177 |             res[j] = '\0';
      |                      ^
include/csv.h:482:13: warning: Memory allocated by 'new' should be deallocated by 'delete', not 'delete[]' [clang-analyzer-unix.MismatchedDeallocator]
  482 |             delete[] root->next;
      |             ^
src/class.cpp:232:9: note: Taking false branch
  232 |         if (import.init_read()==false){
      |         ^
src/class.cpp:237:9: note: Calling 'csv_handler::read_and_terminate'
  237 |         import.read_and_terminate();
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:972:13: note: Taking false branch
  972 |             if (fptr == nullptr)
      |             ^
include/csv.h:974:13: note: Loop condition is false. Execution continues on line 976
  974 |             while (!csv_str.empty())
      |             ^
include/csv.h:981:22: note: Calling 'csv_handler::csv_read_char'
  981 |                 ch = csv_read_char();
      |                      ^~~~~~~~~~~~~~~
include/csv.h:904:17: note: Left side of '||' is false
  904 |             if (fptr == nullptr || feof(fptr))
      |                 ^
include/csv.h:904:36: note: Assuming the condition is false
  904 |             if (fptr == nullptr || feof(fptr))
      |                                    ^~~~~~~~~~
include/csv.h:904:13: note: Taking false branch
  904 |             if (fptr == nullptr || feof(fptr))
      |             ^
include/csv.h:907:17: note: Assuming the condition is false
  907 |             if (ch == EOF)
      |                 ^~~~~~~~~
include/csv.h:907:13: note: Taking false branch
  907 |             if (ch == EOF)
      |             ^
include/csv.h:914:17: note: Assuming 'ch' is >= 32
  914 |             if (ch >= 32 && ch <= 126)
      |                 ^~~~~~~~
include/csv.h:914:17: note: Left side of '&&' is true
include/csv.h:914:29: note: Assuming 'ch' is <= 126
  914 |             if (ch >= 32 && ch <= 126)
      |                             ^~~~~~~~~
include/csv.h:914:13: note: Taking true branch
  914 |             if (ch >= 32 && ch <= 126)
      |             ^
include/csv.h:915:17: note: Calling 'list::push_back'
  915 |                 csv_str.push_back((Char)ch);
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:456:13: note: Loop condition is false. Execution continues on line 458
  456 |             while (root->next != nullptr)
      |             ^
include/csv.h:458:26: note: Memory is allocated
  458 |             root->next = new iter();
      |                          ^~~~~~~~~~
include/csv.h:915:17: note: Returned allocated memory
  915 |                 csv_str.push_back((Char)ch);
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:981:22: note: Returned allocated memory
  981 |                 ch = csv_read_char();
      |                      ^~~~~~~~~~~~~~~
include/csv.h:982:21: note: Assuming 'ch' is equal to 'delim'
  982 |                 if (ch == delim)
      |                     ^~~~~~~~~~~
include/csv.h:982:17: note: Taking true branch
  982 |                 if (ch == delim)
      |                 ^
include/csv.h:983:21: note: Calling 'list::pop_back'
  983 |                     csv_str.pop_back();
      |                     ^~~~~~~~~~~~~~~~~~
include/csv.h:476:13: note: Taking false branch
  476 |             if (empty())
      |             ^
include/csv.h:479:20: note: Assuming the condition is false
  479 |             while (root->next->next != nullptr)
      |                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:479:13: note: Loop condition is false. Execution continues on line 481
  479 |             while (root->next->next != nullptr)
      |             ^
include/csv.h:482:13: note: Memory allocated by 'new' should be deallocated by 'delete', not 'delete[]'
  482 |             delete[] root->next;
      |             ^        ~~~~~~~~~~
include/csv.h:495:13: warning: Memory allocated by 'new' should be deallocated by 'delete', not 'delete[]' [clang-analyzer-unix.MismatchedDeallocator]
  495 |             delete[] head->next;
      |             ^
src/class.cpp:232:9: note: Taking false branch
  232 |         if (import.init_read()==false){
      |         ^
src/class.cpp:237:9: note: Calling 'csv_handler::read_and_terminate'
  237 |         import.read_and_terminate();
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:972:13: note: Taking false branch
  972 |             if (fptr == nullptr)
      |             ^
include/csv.h:974:13: note: Loop condition is false. Execution continues on line 976
  974 |             while (!csv_str.empty())
      |             ^
include/csv.h:982:21: note: 'ch' is not equal to 'delim'
  982 |                 if (ch == delim)
      |                     ^~
include/csv.h:982:17: note: Taking false branch
  982 |                 if (ch == delim)
      |                 ^
include/csv.h:984:21: note: 'ch' is not equal to 'delim'
  984 |                 if (ch == delim || ch == '\n')
      |                     ^~
include/csv.h:984:21: note: Left side of '||' is false
include/csv.h:984:36: note: Assuming the condition is true
  984 |                 if (ch == delim || ch == '\n')
      |                                    ^~~~~~~~~~
include/csv.h:984:17: note: Taking true branch
  984 |                 if (ch == delim || ch == '\n')
      |                 ^
include/csv.h:979:13: note: Loop condition is false.  Exiting loop
  979 |             do
      |             ^
include/csv.h:991:13: note: Loop condition is true.  Entering loop body
  991 |             for (Int i = 0; flag; ++i)
      |             ^
include/csv.h:995:17: note: Loop condition is true.  Entering loop body
  995 |                 while (j < _table.get_keys().size())
      |                 ^
include/csv.h:997:31: note: Calling 'csv_handler::csv_read_char'
  997 |                     Char ch = csv_read_char();
      |                               ^~~~~~~~~~~~~~~
include/csv.h:904:17: note: Left side of '||' is false
  904 |             if (fptr == nullptr || feof(fptr))
      |                 ^
include/csv.h:904:36: note: Assuming the condition is false
  904 |             if (fptr == nullptr || feof(fptr))
      |                                    ^~~~~~~~~~
include/csv.h:904:13: note: Taking false branch
  904 |             if (fptr == nullptr || feof(fptr))
      |             ^
include/csv.h:907:17: note: Assuming the condition is false
  907 |             if (ch == EOF)
      |                 ^~~~~~~~~
include/csv.h:907:13: note: Taking false branch
  907 |             if (ch == EOF)
      |             ^
include/csv.h:914:17: note: Assuming 'ch' is >= 32
  914 |             if (ch >= 32 && ch <= 126)
      |                 ^~~~~~~~
include/csv.h:914:17: note: Left side of '&&' is true
include/csv.h:914:29: note: Assuming 'ch' is <= 126
  914 |             if (ch >= 32 && ch <= 126)
      |                             ^~~~~~~~~
include/csv.h:914:13: note: Taking true branch
  914 |             if (ch >= 32 && ch <= 126)
      |             ^
include/csv.h:915:17: note: Calling 'list::push_back'
  915 |                 csv_str.push_back((Char)ch);
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:456:13: note: Loop condition is false. Execution continues on line 458
  456 |             while (root->next != nullptr)
      |             ^
include/csv.h:458:26: note: Memory is allocated
  458 |             root->next = new iter();
      |                          ^~~~~~~~~~
include/csv.h:915:17: note: Returned allocated memory
  915 |                 csv_str.push_back((Char)ch);
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:997:31: note: Returned allocated memory
  997 |                     Char ch = csv_read_char();
      |                               ^~~~~~~~~~~~~~~
include/csv.h:998:21: note: Taking false branch
  998 |                     if (ch == '\0')
      |                     ^
include/csv.h:1003:21: note: Taking false branch
 1003 |                     if (ch == '\n')
      |                     ^
include/csv.h:1008:25: note: Assuming 'ch' is equal to 'delim'
 1008 |                     if (ch == delim)
      |                         ^~~~~~~~~~~
include/csv.h:1008:21: note: Taking true branch
 1008 |                     if (ch == delim)
      |                     ^
include/csv.h:1011:58: note: Calling 'csv_handler::csv_export_pchar'
 1011 |                         _table.get_row(i).at(j++).assign(csv_export_pchar());
      |                                                          ^~~~~~~~~~~~~~~~~~
include/csv.h:936:13: note: Loop condition is true.  Entering loop body
  936 |             for (; !csv_str.empty(); ++i)
      |             ^
include/csv.h:937:26: note: Calling 'list::pop_front'
  937 |                 ret[i] = csv_str.pop_front();
      |                          ^~~~~~~~~~~~~~~~~~~
include/csv.h:491:13: note: Taking false branch
  491 |             if (empty())
      |             ^
include/csv.h:495:13: note: Memory allocated by 'new' should be deallocated by 'delete', not 'delete[]'
  495 |             delete[] head->next;
      |             ^        ~~~~~~~~~~
include/csv.h:562:13: warning: Memory allocated by 'new' should be deallocated by 'delete', not 'delete[]' [clang-analyzer-unix.MismatchedDeallocator]
  562 |             delete[] root->next;
      |             ^
src/class.cpp:232:9: note: Taking false branch
  232 |         if (import.init_read()==false){
      |         ^
src/class.cpp:237:9: note: Calling 'csv_handler::read_and_terminate'
  237 |         import.read_and_terminate();
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:972:13: note: Taking false branch
  972 |             if (fptr == nullptr)
      |             ^
include/csv.h:974:13: note: Loop condition is false. Execution continues on line 976
  974 |             while (!csv_str.empty())
      |             ^
include/csv.h:982:21: note: 'ch' is not equal to 'delim'
  982 |                 if (ch == delim)
      |                     ^~
include/csv.h:982:17: note: Taking false branch
  982 |                 if (ch == delim)
      |                 ^
include/csv.h:984:21: note: 'ch' is not equal to 'delim'
  984 |                 if (ch == delim || ch == '\n')
      |                     ^~
include/csv.h:984:21: note: Left side of '||' is false
include/csv.h:984:36: note: Assuming the condition is true
  984 |                 if (ch == delim || ch == '\n')
      |                                    ^~~~~~~~~~
include/csv.h:984:17: note: Taking true branch
  984 |                 if (ch == delim || ch == '\n')
      |                 ^
include/csv.h:985:21: note: Calling 'table::add_key'
  985 |                     _table.add_key(csv_export_pchar());
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:601:13: note: Taking false branch
  601 |             if (has_key(e))
      |             ^
include/csv.h:603:13: note: Calling 'list::push_back'
  603 |             keys.push_back(e);
      |             ^~~~~~~~~~~~~~~~~
include/csv.h:456:20: note: Assuming the condition is false
  456 |             while (root->next != nullptr)
      |                    ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:456:13: note: Loop condition is false. Execution continues on line 458
  456 |             while (root->next != nullptr)
      |             ^
include/csv.h:458:26: note: Memory is allocated
  458 |             root->next = new iter();
      |                          ^~~~~~~~~~
include/csv.h:603:13: note: Returned allocated memory
  603 |             keys.push_back(e);
      |             ^~~~~~~~~~~~~~~~~
include/csv.h:605:20: note: Assuming the condition is false
  605 |             while (head->next != nullptr)
      |                    ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:605:13: note: Loop condition is false. Execution continues on line 605
  605 |             while (head->next != nullptr)
      |             ^
include/csv.h:985:21: note: Returned allocated memory
  985 |                     _table.add_key(csv_export_pchar());
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:979:13: note: Loop condition is false.  Exiting loop
  979 |             do
      |             ^
include/csv.h:991:13: note: Loop condition is true.  Entering loop body
  991 |             for (Int i = 0; flag; ++i)
      |             ^
include/csv.h:995:17: note: Loop condition is true.  Entering loop body
  995 |                 while (j < _table.get_keys().size())
      |                 ^
include/csv.h:998:25: note: Assuming the condition is true
  998 |                     if (ch == '\0')
      |                         ^~~~~~~~~~
include/csv.h:998:21: note: Taking true branch
  998 |                     if (ch == '\0')
      |                     ^
include/csv.h:1001:25: note:  Execution continues on line 991
 1001 |                         break;
      |                         ^
include/csv.h:991:13: note: Loop condition is false. Execution continues on line 1019
  991 |             for (Int i = 0; flag; ++i)
      |             ^
include/csv.h:1019:49: note: Assuming 'i' is < 0
 1019 |             for (Int i = _table.num_rows() - 1; i >= 0; --i)
      |                                                 ^~~~~~
include/csv.h:1019:13: note: Loop condition is false. Execution continues on line 1029
 1019 |             for (Int i = _table.num_rows() - 1; i >= 0; --i)
      |             ^
src/class.cpp:237:9: note: Returned allocated memory
  237 |         import.read_and_terminate();
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/class.cpp:238:9: note: Calling 'table::fix_keys'
  238 |         import.get_table().fix_keys({"Student ID","Fullname","Gender","DoB"});
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:654:20: note: Assuming the condition is true
  654 |                         for (Int i = 0; i < curkeys.size(); ++i)
      |                                         ^~~~~~~~~~~~~~~~~~
include/csv.h:654:4: note: Loop condition is true.  Entering loop body
  654 |                         for (Int i = 0; i < curkeys.size(); ++i)
      |                         ^
include/csv.h:657:5: note: Loop condition is false. Execution continues on line 660
  657 |                                 for (Int j = 0; j < nkeys.size(); ++j)
      |                                 ^
include/csv.h:660:10: note: 'flag' is false
  660 |                                 if (!flag)
      |                                      ^~~~
include/csv.h:660:5: note: Taking true branch
  660 |                                 if (!flag)
      |                                 ^
include/csv.h:661:6: note: Calling 'table::rm_key'
  661 |                                         rm_key(curkeys.at(i));
      |                                         ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:615:13: note: Loop condition is true.  Entering loop body
  615 |             for (Int i = 0; i < keys.size(); ++i)
      |             ^
include/csv.h:616:17: note: Taking true branch
  616 |                 if (e.strict_equal(keys.at(i)))
      |                 ^
include/csv.h:618:21: note: Calling 'list::delete_at'
  618 |                     keys.delete_at(i);
      |                     ^~~~~~~~~~~~~~~~~
include/csv.h:555:17: note: 'pos' is >= 0
  555 |             if (pos < 0 || pos >= _size)
      |                 ^~~
include/csv.h:555:17: note: Left side of '||' is false
include/csv.h:555:28: note: 'pos' is < field '_size'
  555 |             if (pos < 0 || pos >= _size)
      |                            ^~~
include/csv.h:555:13: note: Taking false branch
  555 |             if (pos < 0 || pos >= _size)
      |             ^
include/csv.h:558:26: note: Left side of '&&' is false
  558 |             while (pos-- && root->next != nullptr)
      |                          ^
include/csv.h:561:11: note: '?' condition is true
  561 |                         next = root->next != nullptr ? root->next->next : nullptr;
      |                                ^
include/csv.h:562:13: note: Memory allocated by 'new' should be deallocated by 'delete', not 'delete[]'
  562 |             delete[] root->next;
      |             ^        ~~~~~~~~~~
include/csv.h:711:13: warning: Memory allocated by 'new' should be deallocated by 'delete', not 'delete[]' [clang-analyzer-unix.MismatchedDeallocator]
  711 |             delete[] head->next;
      |             ^
src/class.cpp:232:9: note: Taking false branch
  232 |         if (import.init_read()==false){
      |         ^
src/class.cpp:237:9: note: Calling 'csv_handler::read_and_terminate'
  237 |         import.read_and_terminate();
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:972:13: note: Taking false branch
  972 |             if (fptr == nullptr)
      |             ^
include/csv.h:974:13: note: Loop condition is false. Execution continues on line 976
  974 |             while (!csv_str.empty())
      |             ^
include/csv.h:982:21: note: 'ch' is not equal to 'delim'
  982 |                 if (ch == delim)
      |                     ^~
include/csv.h:982:17: note: Taking false branch
  982 |                 if (ch == delim)
      |                 ^
include/csv.h:984:21: note: 'ch' is not equal to 'delim'
  984 |                 if (ch == delim || ch == '\n')
      |                     ^~
include/csv.h:984:21: note: Left side of '||' is false
include/csv.h:984:36: note: Assuming the condition is true
  984 |                 if (ch == delim || ch == '\n')
      |                                    ^~~~~~~~~~
include/csv.h:984:17: note: Taking true branch
  984 |                 if (ch == delim || ch == '\n')
      |                 ^
include/csv.h:979:13: note: Loop condition is false.  Exiting loop
  979 |             do
      |             ^
include/csv.h:991:13: note: Loop condition is true.  Entering loop body
  991 |             for (Int i = 0; flag; ++i)
      |             ^
include/csv.h:993:17: note: Calling 'table::add_row'
  993 |                 _table.add_row();
      |                 ^~~~~~~~~~~~~~~~
include/csv.h:694:13: note: Loop condition is false. Execution continues on line 696
  694 |             while (head->next != nullptr)
      |             ^
include/csv.h:696:26: note: Memory is allocated
  696 |             head->next = new plist();
      |                          ^~~~~~~~~~~
include/csv.h:993:17: note: Returned allocated memory
  993 |                 _table.add_row();
      |                 ^~~~~~~~~~~~~~~~
include/csv.h:995:17: note: Loop condition is true.  Entering loop body
  995 |                 while (j < _table.get_keys().size())
      |                 ^
include/csv.h:998:25: note: Assuming the condition is true
  998 |                     if (ch == '\0')
      |                         ^~~~~~~~~~
include/csv.h:998:21: note: Taking true branch
  998 |                     if (ch == '\0')
      |                     ^
include/csv.h:1001:25: note:  Execution continues on line 991
 1001 |                         break;
      |                         ^
include/csv.h:991:13: note: Loop condition is false. Execution continues on line 1019
  991 |             for (Int i = 0; flag; ++i)
      |             ^
include/csv.h:1019:49: note: Assuming 'i' is >= 0
 1019 |             for (Int i = _table.num_rows() - 1; i >= 0; --i)
      |                                                 ^~~~~~
include/csv.h:1019:13: note: Loop condition is true.  Entering loop body
 1019 |             for (Int i = _table.num_rows() - 1; i >= 0; --i)
      |             ^
include/csv.h:1023:17: note: Loop condition is true.  Entering loop body
 1023 |                 for (Int j = 0; j < _row.size(); ++j)
      |                 ^
include/csv.h:1023:17: note: Loop condition is false. Execution continues on line 1025
include/csv.h:1025:21: note: 'has_unknown' is true
 1025 |                 if (has_unknown)
      |                     ^~~~~~~~~~~
include/csv.h:1025:17: note: Taking true branch
 1025 |                 if (has_unknown)
      |                 ^
include/csv.h:1026:21: note: Calling 'table::rm_row'
 1026 |                     _table.rm_row(i);
      |                     ^~~~~~~~~~~~~~~~
include/csv.h:704:17: note: 'row' is >= 0
  704 |             if (row < 0 || row >= _num_rows)
      |                 ^~~
include/csv.h:704:17: note: Left side of '||' is false
include/csv.h:704:28: note: 'row' is < field '_num_rows'
  704 |             if (row < 0 || row >= _num_rows)
      |                            ^~~
include/csv.h:704:13: note: Taking false branch
  704 |             if (row < 0 || row >= _num_rows)
      |             ^
include/csv.h:707:26: note: Left side of '&&' is false
  707 |             while (row-- && head->next != nullptr)
      |                          ^
include/csv.h:710:11: note: '?' condition is true
  710 |                         next = head->next != nullptr ? head->next->next : nullptr;
      |                                ^
include/csv.h:711:13: note: Memory allocated by 'new' should be deallocated by 'delete', not 'delete[]'
  711 |             delete[] head->next;
      |             ^        ~~~~~~~~~~
include/csv.h:880:26: warning: Potential leak of memory pointed to by 'markCol' [clang-analyzer-cplusplus.NewDeleteLeaks]
  880 |             for (int i = 0; i < Nrows; ++i)
      |                          ^
src/class.cpp:222:32: note: Calling 'table::filter'
  222 |         Interface::print_table(students.get_table().filter(filterStudent),"Students");
      |                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:869:57: note: Memory is allocated
  869 |             bool *markRow = new bool[Nrows], *markCol = new bool[Nkeys];
      |                                                         ^~~~~~~~~~~~~~~
include/csv.h:872:29: note: Assuming 'i' is >= 'Nrows'
  872 |             for (int i = 0; i < Nrows; ++i)
      |                             ^~~~~~~~~
include/csv.h:872:13: note: Loop condition is false. Execution continues on line 876
  872 |             for (int i = 0; i < Nrows; ++i)
      |             ^
include/csv.h:877:29: note: Assuming 'i' is >= 'Nkeys'
  877 |             for (int i = 0; i < Nkeys; ++i)
      |                             ^~~~~~~~~
include/csv.h:877:13: note: Loop condition is false. Execution continues on line 880
  877 |             for (int i = 0; i < Nkeys; ++i)
      |             ^
include/csv.h:880:26: note: Potential leak of memory pointed to by 'markCol'
  880 |             for (int i = 0; i < Nrows; ++i)
      |                          ^
include/csv.h:887:20: warning: Potential leak of memory pointed to by 'markRow' [clang-analyzer-cplusplus.NewDeleteLeaks]
  887 |             return new_table;
      |                    ^
src/class.cpp:222:32: note: Calling 'table::filter'
  222 |         Interface::print_table(students.get_table().filter(filterStudent),"Students");
      |                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:869:29: note: Memory is allocated
  869 |             bool *markRow = new bool[Nrows], *markCol = new bool[Nkeys];
      |                             ^~~~~~~~~~~~~~~
include/csv.h:872:29: note: Assuming 'i' is >= 'Nrows'
  872 |             for (int i = 0; i < Nrows; ++i)
      |                             ^~~~~~~~~
include/csv.h:872:13: note: Loop condition is false. Execution continues on line 876
  872 |             for (int i = 0; i < Nrows; ++i)
      |             ^
include/csv.h:877:29: note: Assuming 'i' is >= 'Nkeys'
  877 |             for (int i = 0; i < Nkeys; ++i)
      |                             ^~~~~~~~~
include/csv.h:877:13: note: Loop condition is false. Execution continues on line 880
  877 |             for (int i = 0; i < Nkeys; ++i)
      |             ^
include/csv.h:880:29: note: 'i' is >= 'Nrows'
  880 |             for (int i = 0; i < Nrows; ++i)
      |                             ^
include/csv.h:880:13: note: Loop condition is false. Execution continues on line 887
  880 |             for (int i = 0; i < Nrows; ++i)
      |             ^
include/csv.h:887:20: note: Potential leak of memory pointed to by 'markRow'
  887 |             return new_table;
      |                    ^
include/csv.h:948:13: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
  948 |             string_copy(_filename, filename);
      |             ^
src/class.cpp:231:21: note: Calling constructor for 'csv_handler'
  231 |         csv_handler import(res.at(1).to_str());
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:945:9: note: Calling default constructor for 'table'
  945 |         csv_handler (const Pchar _filename)
      |         ^~~~~~~~~~~
include/csv.h:594:20: note: Memory is allocated
  594 |             rows = new plist();
      |                    ^~~~~~~~~~~
include/csv.h:945:9: note: Returning from default constructor for 'table'
  945 |         csv_handler (const Pchar _filename)
      |         ^~~~~~~~~~~
include/csv.h:948:13: note: Potential memory leak
  948 |             string_copy(_filename, filename);
      |             ^
include/csv.h:1005:58: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
 1005 |                         _table.get_row(i).at(j++).assign(csv_export_pchar());
      |                                                          ^
src/class.cpp:232:9: note: Taking false branch
  232 |         if (import.init_read()==false){
      |         ^
src/class.cpp:237:9: note: Calling 'csv_handler::read_and_terminate'
  237 |         import.read_and_terminate();
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:972:13: note: Taking false branch
  972 |             if (fptr == nullptr)
      |             ^
include/csv.h:974:13: note: Loop condition is false. Execution continues on line 976
  974 |             while (!csv_str.empty())
      |             ^
include/csv.h:982:21: note: 'ch' is not equal to 'delim'
  982 |                 if (ch == delim)
      |                     ^~
include/csv.h:982:17: note: Taking false branch
  982 |                 if (ch == delim)
      |                 ^
include/csv.h:984:21: note: 'ch' is not equal to 'delim'
  984 |                 if (ch == delim || ch == '\n')
      |                     ^~
include/csv.h:984:21: note: Left side of '||' is false
include/csv.h:984:36: note: Assuming the condition is true
  984 |                 if (ch == delim || ch == '\n')
      |                                    ^~~~~~~~~~
include/csv.h:984:17: note: Taking true branch
  984 |                 if (ch == delim || ch == '\n')
      |                 ^
include/csv.h:979:13: note: Loop condition is false.  Exiting loop
  979 |             do
      |             ^
include/csv.h:991:13: note: Loop condition is true.  Entering loop body
  991 |             for (Int i = 0; flag; ++i)
      |             ^
include/csv.h:995:17: note: Loop condition is true.  Entering loop body
  995 |                 while (j < _table.get_keys().size())
      |                 ^
include/csv.h:998:21: note: Taking false branch
  998 |                     if (ch == '\0')
      |                     ^
include/csv.h:1003:21: note: Taking true branch
 1003 |                     if (ch == '\n')
      |                     ^
include/csv.h:1005:25: note: Calling 'table::get_row'
 1005 |                         _table.get_row(i).at(j++).assign(csv_export_pchar());
      |                         ^~~~~~~~~~~~~~~~~
include/csv.h:726:17: note: 'row' is >= 0
  726 |             if (row < 0 || row >= _num_rows)
      |                 ^~~
include/csv.h:726:17: note: Left side of '||' is false
include/csv.h:726:28: note: Assuming 'row' is >= field '_num_rows'
  726 |             if (row < 0 || row >= _num_rows)
      |                            ^~~~~~~~~~~~~~~~
include/csv.h:726:13: note: Taking true branch
  726 |             if (row < 0 || row >= _num_rows)
      |             ^
include/csv.h:727:25: note: Memory is allocated
  727 |                 return *new list<multitype>();
      |                         ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:1005:25: note: Returned allocated memory
 1005 |                         _table.get_row(i).at(j++).assign(csv_export_pchar());
      |                         ^~~~~~~~~~~~~~~~~
include/csv.h:1005:58: note: Potential memory leak
 1005 |                         _table.get_row(i).at(j++).assign(csv_export_pchar());
      |                                                          ^
include/csv.h:1011:58: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
 1011 |                         _table.get_row(i).at(j++).assign(csv_export_pchar());
      |                                                          ^
src/class.cpp:232:9: note: Taking false branch
  232 |         if (import.init_read()==false){
      |         ^
src/class.cpp:237:9: note: Calling 'csv_handler::read_and_terminate'
  237 |         import.read_and_terminate();
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:972:13: note: Taking false branch
  972 |             if (fptr == nullptr)
      |             ^
include/csv.h:974:13: note: Loop condition is false. Execution continues on line 976
  974 |             while (!csv_str.empty())
      |             ^
include/csv.h:982:21: note: 'ch' is not equal to 'delim'
  982 |                 if (ch == delim)
      |                     ^~
include/csv.h:982:17: note: Taking false branch
  982 |                 if (ch == delim)
      |                 ^
include/csv.h:984:21: note: 'ch' is not equal to 'delim'
  984 |                 if (ch == delim || ch == '\n')
      |                     ^~
include/csv.h:984:21: note: Left side of '||' is false
include/csv.h:984:36: note: Assuming the condition is true
  984 |                 if (ch == delim || ch == '\n')
      |                                    ^~~~~~~~~~
include/csv.h:984:17: note: Taking true branch
  984 |                 if (ch == delim || ch == '\n')
      |                 ^
include/csv.h:979:13: note: Loop condition is false.  Exiting loop
  979 |             do
      |             ^
include/csv.h:991:13: note: Loop condition is true.  Entering loop body
  991 |             for (Int i = 0; flag; ++i)
      |             ^
include/csv.h:995:17: note: Loop condition is true.  Entering loop body
  995 |                 while (j < _table.get_keys().size())
      |                 ^
include/csv.h:998:21: note: Taking false branch
  998 |                     if (ch == '\0')
      |                     ^
include/csv.h:1003:21: note: Taking false branch
 1003 |                     if (ch == '\n')
      |                     ^
include/csv.h:1008:25: note: Assuming 'ch' is equal to 'delim'
 1008 |                     if (ch == delim)
      |                         ^~~~~~~~~~~
include/csv.h:1008:21: note: Taking true branch
 1008 |                     if (ch == delim)
      |                     ^
include/csv.h:1011:25: note: Calling 'table::get_row'
 1011 |                         _table.get_row(i).at(j++).assign(csv_export_pchar());
      |                         ^~~~~~~~~~~~~~~~~
include/csv.h:726:17: note: 'row' is >= 0
  726 |             if (row < 0 || row >= _num_rows)
      |                 ^~~
include/csv.h:726:17: note: Left side of '||' is false
include/csv.h:726:28: note: Assuming 'row' is >= field '_num_rows'
  726 |             if (row < 0 || row >= _num_rows)
      |                            ^~~~~~~~~~~~~~~~
include/csv.h:726:13: note: Taking true branch
  726 |             if (row < 0 || row >= _num_rows)
      |             ^
include/csv.h:727:25: note: Memory is allocated
  727 |                 return *new list<multitype>();
      |                         ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:1011:25: note: Returned allocated memory
 1011 |                         _table.get_row(i).at(j++).assign(csv_export_pchar());
      |                         ^~~~~~~~~~~~~~~~~
include/csv.h:1011:58: note: Potential memory leak
 1011 |                         _table.get_row(i).at(j++).assign(csv_export_pchar());
      |                                                          ^
include/csv.h:1022:17: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
 1022 |                 list<multitype> _row = _table.get_row(i);
      |                 ^
src/class.cpp:232:9: note: Taking false branch
  232 |         if (import.init_read()==false){
      |         ^
src/class.cpp:237:9: note: Calling 'csv_handler::read_and_terminate'
  237 |         import.read_and_terminate();
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:972:13: note: Taking false branch
  972 |             if (fptr == nullptr)
      |             ^
include/csv.h:974:13: note: Loop condition is false. Execution continues on line 976
  974 |             while (!csv_str.empty())
      |             ^
include/csv.h:982:21: note: 'ch' is not equal to 'delim'
  982 |                 if (ch == delim)
      |                     ^~
include/csv.h:982:17: note: Taking false branch
  982 |                 if (ch == delim)
      |                 ^
include/csv.h:984:21: note: 'ch' is not equal to 'delim'
  984 |                 if (ch == delim || ch == '\n')
      |                     ^~
include/csv.h:984:21: note: Left side of '||' is false
include/csv.h:984:36: note: Assuming the condition is true
  984 |                 if (ch == delim || ch == '\n')
      |                                    ^~~~~~~~~~
include/csv.h:984:17: note: Taking true branch
  984 |                 if (ch == delim || ch == '\n')
      |                 ^
include/csv.h:979:13: note: Loop condition is false.  Exiting loop
  979 |             do
      |             ^
include/csv.h:991:13: note: Loop condition is true.  Entering loop body
  991 |             for (Int i = 0; flag; ++i)
      |             ^
include/csv.h:995:17: note: Loop condition is true.  Entering loop body
  995 |                 while (j < _table.get_keys().size())
      |                 ^
include/csv.h:998:25: note: Assuming the condition is true
  998 |                     if (ch == '\0')
      |                         ^~~~~~~~~~
include/csv.h:998:21: note: Taking true branch
  998 |                     if (ch == '\0')
      |                     ^
include/csv.h:1001:25: note:  Execution continues on line 991
 1001 |                         break;
      |                         ^
include/csv.h:991:13: note: Loop condition is false. Execution continues on line 1019
  991 |             for (Int i = 0; flag; ++i)
      |             ^
include/csv.h:1019:49: note: Assuming 'i' is >= 0
 1019 |             for (Int i = _table.num_rows() - 1; i >= 0; --i)
      |                                                 ^~~~~~
include/csv.h:1019:13: note: Loop condition is true.  Entering loop body
 1019 |             for (Int i = _table.num_rows() - 1; i >= 0; --i)
      |             ^
include/csv.h:1022:40: note: Calling 'table::get_row'
 1022 |                 list<multitype> _row = _table.get_row(i);
      |                                        ^~~~~~~~~~~~~~~~~
include/csv.h:726:17: note: 'row' is >= 0
  726 |             if (row < 0 || row >= _num_rows)
      |                 ^~~
include/csv.h:726:17: note: Left side of '||' is false
include/csv.h:726:28: note: Assuming 'row' is >= field '_num_rows'
  726 |             if (row < 0 || row >= _num_rows)
      |                            ^~~~~~~~~~~~~~~~
include/csv.h:726:13: note: Taking true branch
  726 |             if (row < 0 || row >= _num_rows)
      |             ^
include/csv.h:727:25: note: Memory is allocated
  727 |                 return *new list<multitype>();
      |                         ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:1022:40: note: Returned allocated memory
 1022 |                 list<multitype> _row = _table.get_row(i);
      |                                        ^~~~~~~~~~~~~~~~~
include/csv.h:1022:17: note: Potential memory leak
 1022 |                 list<multitype> _row = _table.get_row(i);
      |                 ^
include/csv.h:1052:17: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
 1052 |                 Int countCols = _table.get_row(i).size();
      |                 ^
include/csv.h:29:13: note: expanded from macro 'Int'
   29 | #define Int int
      |             ^
src/class.cpp:232:9: note: Taking false branch
  232 |         if (import.init_read()==false){
      |         ^
src/class.cpp:239:9: note: Loop condition is false. Execution continues on line 251
  239 |         for (int i=0;i<import.get_table().num_rows();i++){
      |         ^
src/class.cpp:251:9: note: Taking false branch
  251 |         if (students.init_write()==false){
      |         ^
src/class.cpp:254:9: note: Taking false branch
  254 |         if (users.init_write()==false){
      |         ^
src/class.cpp:257:9: note: Calling 'csv_handler::write_and_terminate'
  257 |         students.write_and_terminate();
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:1037:13: note: Taking false branch
 1037 |             if (fptr == nullptr)
      |             ^
include/csv.h:1042:13: note: Loop condition is false. Execution continues on line 1047
 1042 |             for (Int i = 0; i < countHeads; ++i)
      |             ^
include/csv.h:1050:29: note: Assuming the condition is true
 1050 |             for (Int i = 0; i < _table.num_rows(); ++i)
      |                             ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:1050:13: note: Loop condition is true.  Entering loop body
 1050 |             for (Int i = 0; i < _table.num_rows(); ++i)
      |             ^
include/csv.h:1052:33: note: Calling 'table::get_row'
 1052 |                 Int countCols = _table.get_row(i).size();
      |                                 ^~~~~~~~~~~~~~~~~
include/csv.h:726:17: note: 'row' is >= 0
  726 |             if (row < 0 || row >= _num_rows)
      |                 ^~~
include/csv.h:726:17: note: Left side of '||' is false
include/csv.h:726:28: note: 'row' is < field '_num_rows'
  726 |             if (row < 0 || row >= _num_rows)
      |                            ^~~
include/csv.h:726:13: note: Taking false branch
  726 |             if (row < 0 || row >= _num_rows)
      |             ^
include/csv.h:729:26: note: Left side of '&&' is false
  729 |             while (row-- && head->next != nullptr)
      |                          ^
include/csv.h:731:11: note: Assuming the condition is false
  731 |                         return head->next != nullptr ? head->next->value : *new list<multitype>();
      |                                ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:731:11: note: '?' condition is false
include/csv.h:731:56: note: Memory is allocated
  731 |                         return head->next != nullptr ? head->next->value : *new list<multitype>();
      |                                                                             ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:1052:33: note: Returned allocated memory
 1052 |                 Int countCols = _table.get_row(i).size();
      |                                 ^~~~~~~~~~~~~~~~~
include/csv.h:1052:17: note: Potential memory leak
 1052 |                 Int countCols = _table.get_row(i).size();
      |                 ^
include/csv.h:29:13: note: expanded from macro 'Int'
   29 | #define Int int
      |             ^
Suppressed 720 warnings (720 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
733 warnings generated.
include/csv.h:385:17: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
  385 |                 return strcmp(to_str(), e.to_str()) == 0;
      |                 ^
src/courses.cpp:982:22: note: Assuming the condition is false
  982 |         for (int i=0;i<years.get_table().num_rows();i++) {
      |                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:982:9: note: Loop condition is false. Execution continues on line 986
  982 |         for (int i=0;i<years.get_table().num_rows();i++) {
      |         ^
src/courses.cpp:990:17: note: Assuming 'select' is >= 1
  990 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |                 ^~~~~~~~~~
src/courses.cpp:990:17: note: Left side of '&&' is true
src/courses.cpp:990:31: note: Assuming the condition is true
  990 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:990:13: note: Taking true branch
  990 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |             ^
src/courses.cpp:991:24: note: Calling 'table::rm_row_where'
  991 |                 while (yearsemester.get_table().rm_row_where("Year ID",years.get_table().get_row(select-1).at(0)));
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:841:13: note: Taking false branch
  841 |             if (key_sid == -1)
      |             ^
include/csv.h:844:20: note: Assuming the condition is true
  844 |             while (head->next != nullptr)
      |                    ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:844:13: note: Loop condition is true.  Entering loop body
  844 |             while (head->next != nullptr)
      |             ^
include/csv.h:846:21: note: 'strict' is false
  846 |                 if (strict ? head->next->value.at(key_sid).strict_equal(e) : head->next->value.at(key_sid).equal(e))
      |                     ^~~~~~
include/csv.h:846:21: note: '?' condition is false
include/csv.h:846:78: note: Calling 'multitype::equal'
  846 |                 if (strict ? head->next->value.at(key_sid).strict_equal(e) : head->next->value.at(key_sid).equal(e))
      |                                                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:382:13: note: Taking false branch
  382 |             if (is_type(e.type()))
      |             ^
include/csv.h:384:32: note: Left side of '||' is true
  384 |             if (is_type("str") || e.is_type("str"))
      |                                ^
include/csv.h:385:31: note: Calling 'multitype::to_str'
  385 |                 return strcmp(to_str(), e.to_str()) == 0;
      |                               ^~~~~~~~
include/csv.h:281:13: note: Taking true branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:283:29: note: Memory is allocated
  283 |                 Pchar buf = new Char[STR_BUFFER];
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:385:31: note: Returned allocated memory
  385 |                 return strcmp(to_str(), e.to_str()) == 0;
      |                               ^~~~~~~~
include/csv.h:385:24: note: Assuming the condition is false
  385 |                 return strcmp(to_str(), e.to_str()) == 0;
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:385:17: note: Potential memory leak
  385 |                 return strcmp(to_str(), e.to_str()) == 0;
      |                 ^
include/csv.h:404:17: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
  404 |                 return strcmp(values._tpchar, e.to_str()) == 0;
      |                 ^
src/courses.cpp:982:22: note: Assuming the condition is false
  982 |         for (int i=0;i<years.get_table().num_rows();i++) {
      |                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:982:9: note: Loop condition is false. Execution continues on line 986
  982 |         for (int i=0;i<years.get_table().num_rows();i++) {
      |         ^
src/courses.cpp:990:17: note: Assuming 'select' is >= 1
  990 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |                 ^~~~~~~~~~
src/courses.cpp:990:17: note: Left side of '&&' is true
src/courses.cpp:990:31: note: Assuming the condition is true
  990 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:990:13: note: Taking true branch
  990 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |             ^
src/courses.cpp:991:24: note: Calling 'table::rm_row_where'
  991 |                 while (yearsemester.get_table().rm_row_where("Year ID",years.get_table().get_row(select-1).at(0)));
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:840:27: note: Calling 'table::get_key'
  840 |             Int key_sid = get_key(key_search);
      |                           ^~~~~~~~~~~~~~~~~~~
include/csv.h:632:29: note: Assuming the condition is true
  632 |             for (Int i = 0; i < keys.size(); ++i)
      |                             ^~~~~~~~~~~~~~~
include/csv.h:632:13: note: Loop condition is true.  Entering loop body
  632 |             for (Int i = 0; i < keys.size(); ++i)
      |             ^
include/csv.h:633:21: note: Calling 'multitype::strict_equal'
  633 |                 if (e.strict_equal(keys.at(i)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:395:13: note: Taking false branch
  395 |             if (!is_type(e.type()))
      |             ^
include/csv.h:397:13: note: Taking false branch
  397 |             if (is_type("int"))
      |             ^
include/csv.h:399:13: note: Taking false branch
  399 |             if (is_type("long"))
      |             ^
include/csv.h:401:13: note: Taking false branch
  401 |             if (is_type("char"))
      |             ^
include/csv.h:403:13: note: Taking true branch
  403 |             if (is_type("str"))
      |             ^
include/csv.h:404:47: note: Calling 'multitype::to_str'
  404 |                 return strcmp(values._tpchar, e.to_str()) == 0;
      |                                               ^~~~~~~~~~
include/csv.h:281:13: note: Taking true branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:283:29: note: Memory is allocated
  283 |                 Pchar buf = new Char[STR_BUFFER];
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:404:47: note: Returned allocated memory
  404 |                 return strcmp(values._tpchar, e.to_str()) == 0;
      |                                               ^~~~~~~~~~
include/csv.h:404:24: note: Assuming the condition is false
  404 |                 return strcmp(values._tpchar, e.to_str()) == 0;
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:404:17: note: Potential memory leak
  404 |                 return strcmp(values._tpchar, e.to_str()) == 0;
      |                 ^
include/csv.h:482:13: warning: Memory allocated by 'new' should be deallocated by 'delete', not 'delete[]' [clang-analyzer-unix.MismatchedDeallocator]
  482 |             delete[] root->next;
      |             ^
src/courses.cpp:786:22: note: Assuming the condition is false
  786 |         for (int i=0;i<semesters.get_table().num_rows();i++) {
      |                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:786:9: note: Loop condition is false. Execution continues on line 789
  786 |         for (int i=0;i<semesters.get_table().num_rows();i++) {
      |         ^
src/courses.cpp:795:17: note: Assuming 'select_semester' is >= 1
  795 |             if (select_semester >=1 && select_semester <= semesters.get_table().num_rows()) {
      |                 ^~~~~~~~~~~~~~~~~~~
src/courses.cpp:795:17: note: Left side of '&&' is true
src/courses.cpp:795:40: note: Assuming the condition is true
  795 |             if (select_semester >=1 && select_semester <= semesters.get_table().num_rows()) {
      |                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:795:13: note: Taking true branch
  795 |             if (select_semester >=1 && select_semester <= semesters.get_table().num_rows()) {
      |             ^
src/courses.cpp:803:17: note: Taking false branch
  803 |                 if (!course_add.init_read()) {
      |                 ^
src/courses.cpp:808:17: note: Calling 'csv_handler::read_and_terminate'
  808 |                 course_add.read_and_terminate();
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:972:13: note: Taking false branch
  972 |             if (fptr == nullptr)
      |             ^
include/csv.h:974:13: note: Loop condition is false. Execution continues on line 976
  974 |             while (!csv_str.empty())
      |             ^
include/csv.h:981:22: note: Calling 'csv_handler::csv_read_char'
  981 |                 ch = csv_read_char();
      |                      ^~~~~~~~~~~~~~~
include/csv.h:904:17: note: Left side of '||' is false
  904 |             if (fptr == nullptr || feof(fptr))
      |                 ^
include/csv.h:904:36: note: Assuming the condition is false
  904 |             if (fptr == nullptr || feof(fptr))
      |                                    ^~~~~~~~~~
include/csv.h:904:13: note: Taking false branch
  904 |             if (fptr == nullptr || feof(fptr))
      |             ^
include/csv.h:907:17: note: Assuming the condition is false
  907 |             if (ch == EOF)
      |                 ^~~~~~~~~
include/csv.h:907:13: note: Taking false branch
  907 |             if (ch == EOF)
      |             ^
include/csv.h:914:17: note: Assuming 'ch' is >= 32
  914 |             if (ch >= 32 && ch <= 126)
      |                 ^~~~~~~~
include/csv.h:914:17: note: Left side of '&&' is true
include/csv.h:914:29: note: Assuming 'ch' is <= 126
  914 |             if (ch >= 32 && ch <= 126)
      |                             ^~~~~~~~~
include/csv.h:914:13: note: Taking true branch
  914 |             if (ch >= 32 && ch <= 126)
      |             ^
include/csv.h:915:17: note: Calling 'list::push_back'
  915 |                 csv_str.push_back((Char)ch);
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:456:13: note: Loop condition is false. Execution continues on line 458
  456 |             while (root->next != nullptr)
      |             ^
include/csv.h:458:26: note: Memory is allocated
  458 |             root->next = new iter();
      |                          ^~~~~~~~~~
include/csv.h:915:17: note: Returned allocated memory
  915 |                 csv_str.push_back((Char)ch);
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:981:22: note: Returned allocated memory
  981 |                 ch = csv_read_char();
      |                      ^~~~~~~~~~~~~~~
include/csv.h:982:21: note: Assuming 'ch' is equal to 'delim'
  982 |                 if (ch == delim)
      |                     ^~~~~~~~~~~
include/csv.h:982:17: note: Taking true branch
  982 |                 if (ch == delim)
      |                 ^
include/csv.h:983:21: note: Calling 'list::pop_back'
  983 |                     csv_str.pop_back();
      |                     ^~~~~~~~~~~~~~~~~~
include/csv.h:476:13: note: Taking false branch
  476 |             if (empty())
      |             ^
include/csv.h:479:20: note: Assuming the condition is false
  479 |             while (root->next->next != nullptr)
      |                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:479:13: note: Loop condition is false. Execution continues on line 481
  479 |             while (root->next->next != nullptr)
      |             ^
include/csv.h:482:13: note: Memory allocated by 'new' should be deallocated by 'delete', not 'delete[]'
  482 |             delete[] root->next;
      |             ^        ~~~~~~~~~~
include/csv.h:880:26: warning: Potential leak of memory pointed to by 'markCol' [clang-analyzer-cplusplus.NewDeleteLeaks]
  880 |             for (int i = 0; i < Nrows; ++i)
      |                          ^
src/courses.cpp:950:22: note: Assuming the condition is false
  950 |         for (int i=0;i<years.get_table().num_rows();i++) {
      |                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:950:9: note: Loop condition is false. Execution continues on line 954
  950 |         for (int i=0;i<years.get_table().num_rows();i++) {
      |         ^
src/courses.cpp:959:17: note: Assuming 'select' is >= 1
  959 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |                 ^~~~~~~~~~
src/courses.cpp:959:17: note: Left side of '&&' is true
src/courses.cpp:959:31: note: Assuming the condition is true
  959 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:959:13: note: Taking true branch
  959 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |             ^
src/courses.cpp:961:38: note: Calling 'table::filter'
  961 |                 table new_year_table=yearsemester.get_table().filter(filter_semester);
      |                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:869:57: note: Memory is allocated
  869 |             bool *markRow = new bool[Nrows], *markCol = new bool[Nkeys];
      |                                                         ^~~~~~~~~~~~~~~
include/csv.h:872:29: note: Assuming 'i' is >= 'Nrows'
  872 |             for (int i = 0; i < Nrows; ++i)
      |                             ^~~~~~~~~
include/csv.h:872:13: note: Loop condition is false. Execution continues on line 876
  872 |             for (int i = 0; i < Nrows; ++i)
      |             ^
include/csv.h:877:29: note: Assuming 'i' is >= 'Nkeys'
  877 |             for (int i = 0; i < Nkeys; ++i)
      |                             ^~~~~~~~~
include/csv.h:877:13: note: Loop condition is false. Execution continues on line 880
  877 |             for (int i = 0; i < Nkeys; ++i)
      |             ^
include/csv.h:880:26: note: Potential leak of memory pointed to by 'markCol'
  880 |             for (int i = 0; i < Nrows; ++i)
      |                          ^
include/csv.h:887:20: warning: Potential leak of memory pointed to by 'markRow' [clang-analyzer-cplusplus.NewDeleteLeaks]
  887 |             return new_table;
      |                    ^
src/courses.cpp:950:22: note: Assuming the condition is false
  950 |         for (int i=0;i<years.get_table().num_rows();i++) {
      |                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:950:9: note: Loop condition is false. Execution continues on line 954
  950 |         for (int i=0;i<years.get_table().num_rows();i++) {
      |         ^
src/courses.cpp:959:17: note: Assuming 'select' is >= 1
  959 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |                 ^~~~~~~~~~
src/courses.cpp:959:17: note: Left side of '&&' is true
src/courses.cpp:959:31: note: Assuming the condition is true
  959 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:959:13: note: Taking true branch
  959 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |             ^
src/courses.cpp:961:38: note: Calling 'table::filter'
  961 |                 table new_year_table=yearsemester.get_table().filter(filter_semester);
      |                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:869:29: note: Memory is allocated
  869 |             bool *markRow = new bool[Nrows], *markCol = new bool[Nkeys];
      |                             ^~~~~~~~~~~~~~~
include/csv.h:872:29: note: Assuming 'i' is >= 'Nrows'
  872 |             for (int i = 0; i < Nrows; ++i)
      |                             ^~~~~~~~~
include/csv.h:872:13: note: Loop condition is false. Execution continues on line 876
  872 |             for (int i = 0; i < Nrows; ++i)
      |             ^
include/csv.h:877:29: note: Assuming 'i' is >= 'Nkeys'
  877 |             for (int i = 0; i < Nkeys; ++i)
      |                             ^~~~~~~~~
include/csv.h:877:13: note: Loop condition is false. Execution continues on line 880
  877 |             for (int i = 0; i < Nkeys; ++i)
      |             ^
include/csv.h:880:29: note: 'i' is >= 'Nrows'
  880 |             for (int i = 0; i < Nrows; ++i)
      |                             ^
include/csv.h:880:13: note: Loop condition is false. Execution continues on line 887
  880 |             for (int i = 0; i < Nrows; ++i)
      |             ^
include/csv.h:887:20: note: Potential leak of memory pointed to by 'markRow'
  887 |             return new_table;
      |                    ^
include/csv.h:948:13: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
  948 |             string_copy(_filename, filename);
      |             ^
src/courses.cpp:786:22: note: Assuming the condition is false
  786 |         for (int i=0;i<semesters.get_table().num_rows();i++) {
      |                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:786:9: note: Loop condition is false. Execution continues on line 789
  786 |         for (int i=0;i<semesters.get_table().num_rows();i++) {
      |         ^
src/courses.cpp:795:17: note: Assuming 'select_semester' is >= 1
  795 |             if (select_semester >=1 && select_semester <= semesters.get_table().num_rows()) {
      |                 ^~~~~~~~~~~~~~~~~~~
src/courses.cpp:795:17: note: Left side of '&&' is true
src/courses.cpp:795:40: note: Assuming the condition is true
  795 |             if (select_semester >=1 && select_semester <= semesters.get_table().num_rows()) {
      |                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:795:13: note: Taking true branch
  795 |             if (select_semester >=1 && select_semester <= semesters.get_table().num_rows()) {
      |             ^
src/courses.cpp:802:29: note: Calling constructor for 'csv_handler'
  802 |                 csv_handler course_add(res.at(0).to_str());
      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:945:9: note: Calling default constructor for 'table'
  945 |         csv_handler (const Pchar _filename)
      |         ^~~~~~~~~~~
include/csv.h:594:20: note: Memory is allocated
  594 |             rows = new plist();
      |                    ^~~~~~~~~~~
include/csv.h:945:9: note: Returning from default constructor for 'table'
  945 |         csv_handler (const Pchar _filename)
      |         ^~~~~~~~~~~
include/csv.h:948:13: note: Potential memory leak
  948 |             string_copy(_filename, filename);
      |             ^
include/csv.h:1052:17: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
 1052 |                 Int countCols = _table.get_row(i).size();
      |                 ^
include/csv.h:29:13: note: expanded from macro 'Int'
   29 | #define Int int
      |             ^
src/courses.cpp:982:22: note: Assuming the condition is false
  982 |         for (int i=0;i<years.get_table().num_rows();i++) {
      |                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:982:9: note: Loop condition is false. Execution continues on line 986
  982 |         for (int i=0;i<years.get_table().num_rows();i++) {
      |         ^
src/courses.cpp:990:17: note: Assuming 'select' is >= 1
  990 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |                 ^~~~~~~~~~
src/courses.cpp:990:17: note: Left side of '&&' is true
src/courses.cpp:990:31: note: Assuming the condition is true
  990 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:990:13: note: Taking true branch
  990 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |             ^
src/courses.cpp:991:17: note: Loop condition is false. Execution continues on line 992
  991 |                 while (yearsemester.get_table().rm_row_where("Year ID",years.get_table().get_row(select-1).at(0)));
      |                 ^
src/courses.cpp:996:17: note: Calling 'csv_handler::write_and_terminate'
  996 |                 yearsemester.write_and_terminate();
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:1037:13: note: Taking false branch
 1037 |             if (fptr == nullptr)
      |             ^
include/csv.h:1042:13: note: Loop condition is false. Execution continues on line 1047
 1042 |             for (Int i = 0; i < countHeads; ++i)
      |             ^
include/csv.h:1050:29: note: Assuming the condition is true
 1050 |             for (Int i = 0; i < _table.num_rows(); ++i)
      |                             ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:1050:13: note: Loop condition is true.  Entering loop body
 1050 |             for (Int i = 0; i < _table.num_rows(); ++i)
      |             ^
include/csv.h:1052:33: note: Calling 'table::get_row'
 1052 |                 Int countCols = _table.get_row(i).size();
      |                                 ^~~~~~~~~~~~~~~~~
include/csv.h:726:17: note: 'row' is >= 0
  726 |             if (row < 0 || row >= _num_rows)
      |                 ^~~
include/csv.h:726:17: note: Left side of '||' is false
include/csv.h:726:28: note: 'row' is < field '_num_rows'
  726 |             if (row < 0 || row >= _num_rows)
      |                            ^~~
include/csv.h:726:13: note: Taking false branch
  726 |             if (row < 0 || row >= _num_rows)
      |             ^
include/csv.h:729:26: note: Left side of '&&' is false
  729 |             while (row-- && head->next != nullptr)
      |                          ^
include/csv.h:731:11: note: Assuming the condition is false
  731 |                         return head->next != nullptr ? head->next->value : *new list<multitype>();
      |                                ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:731:11: note: '?' condition is false
include/csv.h:731:56: note: Memory is allocated
  731 |                         return head->next != nullptr ? head->next->value : *new list<multitype>();
      |                                                                             ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:1052:33: note: Returned allocated memory
 1052 |                 Int countCols = _table.get_row(i).size();
      |                                 ^~~~~~~~~~~~~~~~~
include/csv.h:1052:17: note: Potential memory leak
 1052 |                 Int countCols = _table.get_row(i).size();
      |                 ^
include/csv.h:29:13: note: expanded from macro 'Int'
   29 | #define Int int
      |             ^
include/csv.h:1055:45: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
 1055 |                         fprintf(fptr, "%s", _table.get_row(i).at(j).to_str());
      |                                             ^
src/courses.cpp:982:22: note: Assuming the condition is false
  982 |         for (int i=0;i<years.get_table().num_rows();i++) {
      |                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:982:9: note: Loop condition is false. Execution continues on line 986
  982 |         for (int i=0;i<years.get_table().num_rows();i++) {
      |         ^
src/courses.cpp:990:17: note: Assuming 'select' is >= 1
  990 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |                 ^~~~~~~~~~
src/courses.cpp:990:17: note: Left side of '&&' is true
src/courses.cpp:990:31: note: Assuming the condition is true
  990 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:990:13: note: Taking true branch
  990 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |             ^
src/courses.cpp:991:17: note: Loop condition is false. Execution continues on line 992
  991 |                 while (yearsemester.get_table().rm_row_where("Year ID",years.get_table().get_row(select-1).at(0)));
      |                 ^
src/courses.cpp:996:17: note: Calling 'csv_handler::write_and_terminate'
  996 |                 yearsemester.write_and_terminate();
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:1037:13: note: Taking false branch
 1037 |             if (fptr == nullptr)
      |             ^
include/csv.h:1042:13: note: Loop condition is false. Execution continues on line 1047
 1042 |             for (Int i = 0; i < countHeads; ++i)
      |             ^
include/csv.h:1050:29: note: Assuming the condition is true
 1050 |             for (Int i = 0; i < _table.num_rows(); ++i)
      |                             ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:1050:13: note: Loop condition is true.  Entering loop body
 1050 |             for (Int i = 0; i < _table.num_rows(); ++i)
      |             ^
include/csv.h:1053:33: note: Assuming 'j' is < 'countCols'
 1053 |                 for (Int j = 0; j < countCols; ++j)
      |                                 ^~~~~~~~~~~~~
include/csv.h:1053:17: note: Loop condition is true.  Entering loop body
 1053 |                 for (Int j = 0; j < countCols; ++j)
      |                 ^
include/csv.h:1054:25: note: Assuming the condition is false
 1054 |                     if (j == countCols - 1)
      |                         ^~~~~~~~~~~~~~~~~~
include/csv.h:1054:21: note: Taking false branch
 1054 |                     if (j == countCols - 1)
      |                     ^
include/csv.h:1053:33: note: 'j' is < 'countCols'
 1053 |                 for (Int j = 0; j < countCols; ++j)
      |                                 ^
include/csv.h:1053:17: note: Loop condition is true.  Entering loop body
 1053 |                 for (Int j = 0; j < countCols; ++j)
      |                 ^
include/csv.h:1054:25: note: Assuming the condition is true
 1054 |                     if (j == countCols - 1)
      |                         ^~~~~~~~~~~~~~~~~~
include/csv.h:1054:21: note: Taking true branch
 1054 |                     if (j == countCols - 1)
      |                     ^
include/csv.h:1055:45: note: Calling 'table::get_row'
 1055 |                         fprintf(fptr, "%s", _table.get_row(i).at(j).to_str());
      |                                             ^~~~~~~~~~~~~~~~~
include/csv.h:726:17: note: 'row' is >= 0
  726 |             if (row < 0 || row >= _num_rows)
      |                 ^~~
include/csv.h:726:17: note: Left side of '||' is false
include/csv.h:726:28: note: Assuming 'row' is >= field '_num_rows'
  726 |             if (row < 0 || row >= _num_rows)
      |                            ^~~~~~~~~~~~~~~~
include/csv.h:726:13: note: Taking true branch
  726 |             if (row < 0 || row >= _num_rows)
      |             ^
include/csv.h:727:25: note: Memory is allocated
  727 |                 return *new list<multitype>();
      |                         ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:1055:45: note: Returned allocated memory
 1055 |                         fprintf(fptr, "%s", _table.get_row(i).at(j).to_str());
      |                                             ^~~~~~~~~~~~~~~~~
include/csv.h:1055:45: note: Potential memory leak
include/csv.h:1057:47: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
 1057 |                         fprintf(fptr, "%s%c", _table.get_row(i).at(j).to_str(), delim);
      |                                               ^
src/courses.cpp:982:22: note: Assuming the condition is false
  982 |         for (int i=0;i<years.get_table().num_rows();i++) {
      |                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:982:9: note: Loop condition is false. Execution continues on line 986
  982 |         for (int i=0;i<years.get_table().num_rows();i++) {
      |         ^
src/courses.cpp:990:17: note: Assuming 'select' is >= 1
  990 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |                 ^~~~~~~~~~
src/courses.cpp:990:17: note: Left side of '&&' is true
src/courses.cpp:990:31: note: Assuming the condition is true
  990 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:990:13: note: Taking true branch
  990 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |             ^
src/courses.cpp:991:17: note: Loop condition is false. Execution continues on line 992
  991 |                 while (yearsemester.get_table().rm_row_where("Year ID",years.get_table().get_row(select-1).at(0)));
      |                 ^
src/courses.cpp:996:17: note: Calling 'csv_handler::write_and_terminate'
  996 |                 yearsemester.write_and_terminate();
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:1037:13: note: Taking false branch
 1037 |             if (fptr == nullptr)
      |             ^
include/csv.h:1042:13: note: Loop condition is false. Execution continues on line 1047
 1042 |             for (Int i = 0; i < countHeads; ++i)
      |             ^
include/csv.h:1050:29: note: Assuming the condition is true
 1050 |             for (Int i = 0; i < _table.num_rows(); ++i)
      |                             ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:1050:13: note: Loop condition is true.  Entering loop body
 1050 |             for (Int i = 0; i < _table.num_rows(); ++i)
      |             ^
include/csv.h:1053:33: note: Assuming 'j' is < 'countCols'
 1053 |                 for (Int j = 0; j < countCols; ++j)
      |                                 ^~~~~~~~~~~~~
include/csv.h:1053:17: note: Loop condition is true.  Entering loop body
 1053 |                 for (Int j = 0; j < countCols; ++j)
      |                 ^
include/csv.h:1054:25: note: Assuming the condition is false
 1054 |                     if (j == countCols - 1)
      |                         ^~~~~~~~~~~~~~~~~~
include/csv.h:1054:21: note: Taking false branch
 1054 |                     if (j == countCols - 1)
      |                     ^
include/csv.h:1053:33: note: 'j' is < 'countCols'
 1053 |                 for (Int j = 0; j < countCols; ++j)
      |                                 ^
include/csv.h:1053:17: note: Loop condition is true.  Entering loop body
 1053 |                 for (Int j = 0; j < countCols; ++j)
      |                 ^
include/csv.h:1054:25: note: Assuming the condition is false
 1054 |                     if (j == countCols - 1)
      |                         ^~~~~~~~~~~~~~~~~~
include/csv.h:1054:21: note: Taking false branch
 1054 |                     if (j == countCols - 1)
      |                     ^
include/csv.h:1057:47: note: Calling 'table::get_row'
 1057 |                         fprintf(fptr, "%s%c", _table.get_row(i).at(j).to_str(), delim);
      |                                               ^~~~~~~~~~~~~~~~~
include/csv.h:726:17: note: 'row' is >= 0
  726 |             if (row < 0 || row >= _num_rows)
      |                 ^~~
include/csv.h:726:17: note: Left side of '||' is false
include/csv.h:726:28: note: Assuming 'row' is >= field '_num_rows'
  726 |             if (row < 0 || row >= _num_rows)
      |                            ^~~~~~~~~~~~~~~~
include/csv.h:726:13: note: Taking true branch
  726 |             if (row < 0 || row >= _num_rows)
      |             ^
include/csv.h:727:25: note: Memory is allocated
  727 |                 return *new list<multitype>();
      |                         ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:1057:47: note: Returned allocated memory
 1057 |                         fprintf(fptr, "%s%c", _table.get_row(i).at(j).to_str(), delim);
      |                                               ^~~~~~~~~~~~~~~~~
include/csv.h:1057:47: note: Potential memory leak
src/courses.cpp:968:42: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
  968 |                 table new_semester_table=semesters.get_table().filter(filter_semester_name);
      |                                          ^
src/courses.cpp:950:22: note: Assuming the condition is false
  950 |         for (int i=0;i<years.get_table().num_rows();i++) {
      |                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:950:9: note: Loop condition is false. Execution continues on line 954
  950 |         for (int i=0;i<years.get_table().num_rows();i++) {
      |         ^
src/courses.cpp:959:17: note: Assuming 'select' is >= 1
  959 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |                 ^~~~~~~~~~
src/courses.cpp:959:17: note: Left side of '&&' is true
src/courses.cpp:959:31: note: Assuming the condition is true
  959 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:959:13: note: Taking true branch
  959 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |             ^
src/courses.cpp:961:38: note: Calling 'table::filter'
  961 |                 table new_year_table=yearsemester.get_table().filter(filter_semester);
      |                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:872:29: note: Assuming 'i' is >= 'Nrows'
  872 |             for (int i = 0; i < Nrows; ++i)
      |                             ^~~~~~~~~
include/csv.h:872:13: note: Loop condition is false. Execution continues on line 876
  872 |             for (int i = 0; i < Nrows; ++i)
      |             ^
include/csv.h:876:19: note: Calling default constructor for 'table'
  876 |             table new_table;
      |                   ^~~~~~~~~
include/csv.h:594:20: note: Memory is allocated
  594 |             rows = new plist();
      |                    ^~~~~~~~~~~
include/csv.h:876:19: note: Returning from default constructor for 'table'
  876 |             table new_table;
      |                   ^~~~~~~~~
include/csv.h:877:29: note: Assuming 'i' is >= 'Nkeys'
  877 |             for (int i = 0; i < Nkeys; ++i)
      |                             ^~~~~~~~~
include/csv.h:877:13: note: Loop condition is false. Execution continues on line 880
  877 |             for (int i = 0; i < Nkeys; ++i)
      |             ^
include/csv.h:880:29: note: 'i' is >= 'Nrows'
  880 |             for (int i = 0; i < Nrows; ++i)
      |                             ^
include/csv.h:880:13: note: Loop condition is false. Execution continues on line 887
  880 |             for (int i = 0; i < Nrows; ++i)
      |             ^
src/courses.cpp:961:38: note: Returned allocated memory
  961 |                 table new_year_table=yearsemester.get_table().filter(filter_semester);
      |                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:963:17: note: Loop condition is false. Execution continues on line 968
  963 |                 for (int j=0;j<new_year_table.num_rows();j++) {
      |                 ^
src/courses.cpp:968:42: note: Potential memory leak
  968 |                 table new_semester_table=semesters.get_table().filter(filter_semester_name);
      |                                          ^
src/courses.cpp:983:13: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
  983 |             year_menu.add_item(i+1,years.get_table().get_row(i).at(1));
      |             ^
src/courses.cpp:982:22: note: Assuming the condition is true
  982 |         for (int i=0;i<years.get_table().num_rows();i++) {
      |                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:982:9: note: Loop condition is true.  Entering loop body
  982 |         for (int i=0;i<years.get_table().num_rows();i++) {
      |         ^
src/courses.cpp:983:36: note: Calling 'table::get_row'
  983 |             year_menu.add_item(i+1,years.get_table().get_row(i).at(1));
      |                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:726:17: note: 'row' is >= 0
  726 |             if (row < 0 || row >= _num_rows)
      |                 ^~~
include/csv.h:726:17: note: Left side of '||' is false
include/csv.h:726:28: note: 'row' is < field '_num_rows'
  726 |             if (row < 0 || row >= _num_rows)
      |                            ^~~
include/csv.h:726:13: note: Taking false branch
  726 |             if (row < 0 || row >= _num_rows)
      |             ^
include/csv.h:729:26: note: Left side of '&&' is false
  729 |             while (row-- && head->next != nullptr)
      |                          ^
include/csv.h:731:11: note: Assuming the condition is false
  731 |                         return head->next != nullptr ? head->next->value : *new list<multitype>();
      |                                ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:731:11: note: '?' condition is false
include/csv.h:731:56: note: Memory is allocated
  731 |                         return head->next != nullptr ? head->next->value : *new list<multitype>();
      |                                                                             ^~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:983:36: note: Returned allocated memory
  983 |             year_menu.add_item(i+1,years.get_table().get_row(i).at(1));
      |                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:983:13: note: Potential memory leak
  983 |             year_menu.add_item(i+1,years.get_table().get_row(i).at(1));
      |             ^
src/courses.cpp:991:24: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
  991 |                 while (yearsemester.get_table().rm_row_where("Year ID",years.get_table().get_row(select-1).at(0)));
      |                        ^
src/courses.cpp:982:22: note: Assuming the condition is false
  982 |         for (int i=0;i<years.get_table().num_rows();i++) {
      |                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:982:9: note: Loop condition is false. Execution continues on line 986
  982 |         for (int i=0;i<years.get_table().num_rows();i++) {
      |         ^
src/courses.cpp:990:17: note: Assuming 'select' is >= 1
  990 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |                 ^~~~~~~~~~
src/courses.cpp:990:17: note: Left side of '&&' is true
src/courses.cpp:990:31: note: Assuming the condition is true
  990 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:990:13: note: Taking true branch
  990 |             if (select >=1 && select <= years.get_table().num_rows()) {
      |             ^
src/courses.cpp:991:72: note: Calling 'table::get_row'
  991 |                 while (yearsemester.get_table().rm_row_where("Year ID",years.get_table().get_row(select-1).at(0)));
      |                                                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:726:17: note: 'row' is >= 0
  726 |             if (row < 0 || row >= _num_rows)
      |                 ^~~
include/csv.h:726:17: note: Left side of '||' is false
include/csv.h:726:28: note: Assuming 'row' is >= field '_num_rows'
  726 |             if (row < 0 || row >= _num_rows)
      |                            ^~~~~~~~~~~~~~~~
include/csv.h:726:13: note: Taking true branch
  726 |             if (row < 0 || row >= _num_rows)
      |             ^
include/csv.h:727:25: note: Memory is allocated
  727 |                 return *new list<multitype>();
      |                         ^~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:991:72: note: Returned allocated memory
  991 |                 while (yearsemester.get_table().rm_row_where("Year ID",years.get_table().get_row(select-1).at(0)));
      |                                                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/courses.cpp:991:24: note: Potential memory leak
  991 |                 while (yearsemester.get_table().rm_row_where("Year ID",years.get_table().get_row(select-1).at(0)));
      |                        ^
Suppressed 720 warnings (720 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
726 warnings generated.
include/csv.h:175:60: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                                                            ^
src/csv_import.cpp:35:9: note: Calling 'csv_read_util'
   35 |         csv_read_util(attendancelist, "attendancelist",
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   36 |                       {"Attendance ID", "Student ID", "Course ID", "Checkin at", "Active"});
      |                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/csv_import.cpp:22:9: note: Taking true branch
   22 |         if (!csv.init_read())
      |         ^
src/csv_import.cpp:25:35: note: Calling 'multitype::append'
   25 |                                   Csv::multitype("Database file \"db/").append(filename).append(".csv\" is missing."));
      |                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:171:25: note: Calling 'multitype::to_str'
  171 |             Char *cur = to_str(),
      |                         ^~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking false branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:299:13: note: Taking false branch
  299 |             if (is_type("str"))
      |             ^
include/csv.h:301:13: note: Taking false branch
  301 |             if (is_type("double"))
      |             ^
include/csv.h:328:16: note: Storing uninitialized value
  328 |                         Pchar buf = new Char[1]; buf[0] = '\0';
      |                                     ^~~~~~~~~~~
include/csv.h:171:25: note: Returning from 'multitype::to_str'
  171 |             Char *cur = to_str(),
      |                         ^~~~~~~~
include/csv.h:175:29: note: Assuming the condition is true
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:175:13: note: Loop condition is true.  Entering loop body
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |             ^
include/csv.h:175:29: note: Assuming the condition is true
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:175:13: note: Loop condition is true.  Entering loop body
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |             ^
include/csv.h:175:60: note: Assigned value is garbage or undefined
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                                                            ^ ~~~~~~~~
include/csv.h:176:26: warning: Potential leak of memory pointed to by 'cur' [clang-analyzer-cplusplus.NewDeleteLeaks]
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                          ^
src/csv_import.cpp:35:9: note: Calling 'csv_read_util'
   35 |         csv_read_util(attendancelist, "attendancelist",
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   36 |                       {"Attendance ID", "Student ID", "Course ID", "Checkin at", "Active"});
      |                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/csv_import.cpp:22:9: note: Taking true branch
   22 |         if (!csv.init_read())
      |         ^
src/csv_import.cpp:25:35: note: Calling 'multitype::append'
   25 |                                   Csv::multitype("Database file \"db/").append(filename).append(".csv\" is missing."));
      |                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:171:25: note: Calling 'multitype::to_str'
  171 |             Char *cur = to_str(),
      |                         ^~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking false branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:299:13: note: Taking false branch
  299 |             if (is_type("str"))
      |             ^
include/csv.h:301:13: note: Taking false branch
  301 |             if (is_type("double"))
      |             ^
include/csv.h:328:16: note: Memory is allocated
  328 |                         Pchar buf = new Char[1]; buf[0] = '\0';
      |                                     ^~~~~~~~~~~
include/csv.h:171:25: note: Returned allocated memory
  171 |             Char *cur = to_str(),
      |                         ^~~~~~~~
include/csv.h:175:29: note: Assuming the condition is false
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:175:13: note: Loop condition is false. Execution continues on line 176
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |             ^
include/csv.h:176:26: note: Potential leak of memory pointed to by 'cur'
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                          ^
include/csv.h:176:60: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                                                            ^
src/csv_import.cpp:35:9: note: Calling 'csv_read_util'
   35 |         csv_read_util(attendancelist, "attendancelist",
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   36 |                       {"Attendance ID", "Student ID", "Course ID", "Checkin at", "Active"});
      |                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/csv_import.cpp:22:9: note: Taking true branch
   22 |         if (!csv.init_read())
      |         ^
src/csv_import.cpp:25:35: note: Calling 'multitype::append'
   25 |                                   Csv::multitype("Database file \"db/").append(filename).append(".csv\" is missing."));
      |                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:172:25: note: Calling 'multitype::to_str'
  172 |                  *app = e.to_str(),
      |                         ^~~~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking false branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:299:13: note: Taking false branch
  299 |             if (is_type("str"))
      |             ^
include/csv.h:301:13: note: Taking false branch
  301 |             if (is_type("double"))
      |             ^
include/csv.h:328:16: note: Storing uninitialized value
  328 |                         Pchar buf = new Char[1]; buf[0] = '\0';
      |                                     ^~~~~~~~~~~
include/csv.h:172:25: note: Returning from 'multitype::to_str'
  172 |                  *app = e.to_str(),
      |                         ^~~~~~~~~~
include/csv.h:175:29: note: Assuming the condition is false
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:175:13: note: Loop condition is false. Execution continues on line 176
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |             ^
include/csv.h:176:29: note: Assuming the condition is true
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:176:13: note: Loop condition is true.  Entering loop body
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |             ^
include/csv.h:176:29: note: Assuming the condition is true
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:176:13: note: Loop condition is true.  Entering loop body
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |             ^
include/csv.h:176:60: note: Assigned value is garbage or undefined
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                                                            ^ ~~~~~~~~
include/csv.h:177:22: warning: Potential leak of memory pointed to by 'app' [clang-analyzer-cplusplus.NewDeleteLeaks]
  177 |             res[j] = '\0';
      |                      ^
src/csv_import.cpp:35:9: note: Calling 'csv_read_util'
   35 |         csv_read_util(attendancelist, "attendancelist",
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   36 |                       {"Attendance ID", "Student ID", "Course ID", "Checkin at", "Active"});
      |                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/csv_import.cpp:22:9: note: Taking true branch
   22 |         if (!csv.init_read())
      |         ^
src/csv_import.cpp:25:35: note: Calling 'multitype::append'
   25 |                                   Csv::multitype("Database file \"db/").append(filename).append(".csv\" is missing."));
      |                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:172:25: note: Calling 'multitype::to_str'
  172 |                  *app = e.to_str(),
      |                         ^~~~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking false branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:299:13: note: Taking false branch
  299 |             if (is_type("str"))
      |             ^
include/csv.h:301:13: note: Taking false branch
  301 |             if (is_type("double"))
      |             ^
include/csv.h:328:16: note: Memory is allocated
  328 |                         Pchar buf = new Char[1]; buf[0] = '\0';
      |                                     ^~~~~~~~~~~
include/csv.h:172:25: note: Returned allocated memory
  172 |                  *app = e.to_str(),
      |                         ^~~~~~~~~~
include/csv.h:175:29: note: Assuming the condition is false
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:175:13: note: Loop condition is false. Execution continues on line 176
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |             ^
include/csv.h:176:29: note: Assuming the condition is false
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:176:13: note: Loop condition is false. Execution continues on line 177
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |             ^
include/csv.h:177:22: note: Potential leak of memory pointed to by 'app'
  177 |             res[j] = '\0';
      |                      ^
include/csv.h:1005:58: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
 1005 |                         _table.get_row(i).at(j++).assign(csv_export_pchar());
      |                                                          ^
src/csv_import.cpp:35:9: note: Calling 'csv_read_util'
   35 |         csv_read_util(attendancelist, "attendancelist",
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   36 |                       {"Attendance ID", "Student ID", "Course ID", "Checkin at", "Active"});
      |                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/csv_import.cpp:22:9: note: Taking false branch
   22 |         if (!csv.init_read())
      |         ^
src/csv_import.cpp:29:9: note: Calling 'csv_handler::read_and_terminate'
   29 |         csv.read_and_terminate();
      |         ^~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:972:13: note: Taking false branch
  972 |             if (fptr == nullptr)
      |             ^
include/csv.h:974:13: note: Loop condition is false. Execution continues on line 976
  974 |             while (!csv_str.empty())
      |             ^
include/csv.h:982:21: note: 'ch' is not equal to 'delim'
  982 |                 if (ch == delim)
      |                     ^~
include/csv.h:982:17: note: Taking false branch
  982 |                 if (ch == delim)
      |                 ^
include/csv.h:984:21: note: 'ch' is not equal to 'delim'
  984 |                 if (ch == delim || ch == '\n')
      |                     ^~
include/csv.h:984:21: note: Left side of '||' is false
include/csv.h:984:36: note: Assuming the condition is true
  984 |                 if (ch == delim || ch == '\n')
      |                                    ^~~~~~~~~~
include/csv.h:984:17: note: Taking true branch
  984 |                 if (ch == delim || ch == '\n')
      |                 ^
include/csv.h:979:13: note: Loop condition is false.  Exiting loop
  979 |             do
      |             ^
include/csv.h:991:13: note: Loop condition is true.  Entering loop body
  991 |             for (Int i = 0; flag; ++i)
      |             ^
include/csv.h:995:17: note: Loop condition is true.  Entering loop body
  995 |                 while (j < _table.get_keys().size())
      |                 ^
include/csv.h:998:21: note: Taking false branch
  998 |                     if (ch == '\0')
      |                     ^
include/csv.h:1003:21: note: Taking true branch
 1003 |                     if (ch == '\n')
      |                     ^
include/csv.h:1005:25: note: Calling 'table::get_row'
 1005 |                         _table.get_row(i).at(j++).assign(csv_export_pchar());
      |                         ^~~~~~~~~~~~~~~~~
include/csv.h:726:17: note: 'row' is >= 0
  726 |             if (row < 0 || row >= _num_rows)
      |                 ^~~
include/csv.h:726:17: note: Left side of '||' is false
include/csv.h:726:28: note: Assuming 'row' is >= field '_num_rows'
  726 |             if (row < 0 || row >= _num_rows)
      |                            ^~~~~~~~~~~~~~~~
include/csv.h:726:13: note: Taking true branch
  726 |             if (row < 0 || row >= _num_rows)
      |             ^
include/csv.h:727:25: note: Memory is allocated
  727 |                 return *new list<multitype>();
      |                         ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:1005:25: note: Returned allocated memory
 1005 |                         _table.get_row(i).at(j++).assign(csv_export_pchar());
      |                         ^~~~~~~~~~~~~~~~~
include/csv.h:1005:58: note: Potential memory leak
 1005 |                         _table.get_row(i).at(j++).assign(csv_export_pchar());
      |                                                          ^
include/csv.h:1022:17: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
 1022 |                 list<multitype> _row = _table.get_row(i);
      |                 ^
src/csv_import.cpp:35:9: note: Calling 'csv_read_util'
   35 |         csv_read_util(attendancelist, "attendancelist",
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   36 |                       {"Attendance ID", "Student ID", "Course ID", "Checkin at", "Active"});
      |                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/csv_import.cpp:22:9: note: Taking false branch
   22 |         if (!csv.init_read())
      |         ^
src/csv_import.cpp:29:9: note: Calling 'csv_handler::read_and_terminate'
   29 |         csv.read_and_terminate();
      |         ^~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:972:13: note: Taking false branch
  972 |             if (fptr == nullptr)
      |             ^
include/csv.h:974:13: note: Loop condition is false. Execution continues on line 976
  974 |             while (!csv_str.empty())
      |             ^
include/csv.h:982:21: note: 'ch' is not equal to 'delim'
  982 |                 if (ch == delim)
      |                     ^~
include/csv.h:982:17: note: Taking false branch
  982 |                 if (ch == delim)
      |                 ^
include/csv.h:984:21: note: 'ch' is not equal to 'delim'
  984 |                 if (ch == delim || ch == '\n')
      |                     ^~
include/csv.h:984:21: note: Left side of '||' is false
include/csv.h:984:36: note: Assuming the condition is true
  984 |                 if (ch == delim || ch == '\n')
      |                                    ^~~~~~~~~~
include/csv.h:984:17: note: Taking true branch
  984 |                 if (ch == delim || ch == '\n')
      |                 ^
include/csv.h:979:13: note: Loop condition is false.  Exiting loop
  979 |             do
      |             ^
include/csv.h:991:13: note: Loop condition is true.  Entering loop body
  991 |             for (Int i = 0; flag; ++i)
      |             ^
include/csv.h:995:17: note: Loop condition is true.  Entering loop body
  995 |                 while (j < _table.get_keys().size())
      |                 ^
include/csv.h:998:25: note: Assuming the condition is true
  998 |                     if (ch == '\0')
      |                         ^~~~~~~~~~
include/csv.h:998:21: note: Taking true branch
  998 |                     if (ch == '\0')
      |                     ^
include/csv.h:1001:25: note:  Execution continues on line 991
 1001 |                         break;
      |                         ^
include/csv.h:991:13: note: Loop condition is false. Execution continues on line 1019
  991 |             for (Int i = 0; flag; ++i)
      |             ^
include/csv.h:1019:49: note: Assuming 'i' is >= 0
 1019 |             for (Int i = _table.num_rows() - 1; i >= 0; --i)
      |                                                 ^~~~~~
include/csv.h:1019:13: note: Loop condition is true.  Entering loop body
 1019 |             for (Int i = _table.num_rows() - 1; i >= 0; --i)
      |             ^
include/csv.h:1022:40: note: Calling 'table::get_row'
 1022 |                 list<multitype> _row = _table.get_row(i);
      |                                        ^~~~~~~~~~~~~~~~~
include/csv.h:726:17: note: 'row' is >= 0
  726 |             if (row < 0 || row >= _num_rows)
      |                 ^~~
include/csv.h:726:17: note: Left side of '||' is false
include/csv.h:726:28: note: Assuming 'row' is < field '_num_rows'
  726 |             if (row < 0 || row >= _num_rows)
      |                            ^~~~~~~~~~~~~~~~
include/csv.h:726:13: note: Taking false branch
  726 |             if (row < 0 || row >= _num_rows)
      |             ^
include/csv.h:729:20: note: Assuming the condition is true
  729 |             while (row-- && head->next != nullptr)
      |                    ^~~~~
include/csv.h:729:20: note: Left side of '&&' is true
include/csv.h:729:29: note: Assuming the condition is true
  729 |             while (row-- && head->next != nullptr)
      |                             ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:729:13: note: Loop condition is true.  Entering loop body
  729 |             while (row-- && head->next != nullptr)
      |             ^
include/csv.h:729:20: note: Assuming the condition is true
  729 |             while (row-- && head->next != nullptr)
      |                    ^~~~~
include/csv.h:729:20: note: Left side of '&&' is true
include/csv.h:729:29: note: Assuming the condition is false
  729 |             while (row-- && head->next != nullptr)
      |                             ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:729:13: note: Loop condition is false. Execution continues on line 731
  729 |             while (row-- && head->next != nullptr)
      |             ^
include/csv.h:731:11: note: '?' condition is false
  731 |                         return head->next != nullptr ? head->next->value : *new list<multitype>();
      |                                ^
include/csv.h:731:56: note: Memory is allocated
  731 |                         return head->next != nullptr ? head->next->value : *new list<multitype>();
      |                                                                             ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:1022:40: note: Returned allocated memory
 1022 |                 list<multitype> _row = _table.get_row(i);
      |                                        ^~~~~~~~~~~~~~~~~
include/csv.h:1022:17: note: Potential memory leak
 1022 |                 list<multitype> _row = _table.get_row(i);
      |                 ^
Suppressed 720 warnings (720 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
241 warnings generated.
src/date.cpp:29:31: warning: use nullptr [modernize-use-nullptr]
   29 |     std::time_t t = std::time(0);
      |                               ^
      |                               nullptr
src/date.cpp:116:18: warning: The left operand of '==' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
  116 |         if (s[i] == 'Y')
      |             ~~~~ ^
src/date.cpp:106:15: note: Calling 'multitype::to_str'
  106 |     char *s = format.to_str();
      |               ^~~~~~~~~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking true branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:295:29: note: Storing uninitialized value
  295 |                 Pchar buf = new Char[2];
      |                             ^~~~~~~~~~~
src/date.cpp:106:15: note: Returning from 'multitype::to_str'
  106 |     char *s = format.to_str();
      |               ^~~~~~~~~~~~~~~
src/date.cpp:108:21: note: Assuming the condition is false
  108 |     for (int i = 0; i < Ns / 2; ++i)
      |                     ^~~~~~~~~~
src/date.cpp:108:5: note: Loop condition is false. Execution continues on line 114
  108 |     for (int i = 0; i < Ns / 2; ++i)
      |     ^
src/date.cpp:114:21: note: Assuming 'i' is < 'Ns'
  114 |     for (int i = 0; i < Ns; ++i)
      |                     ^~~~~~
src/date.cpp:114:5: note: Loop condition is true.  Entering loop body
  114 |     for (int i = 0; i < Ns; ++i)
      |     ^
src/date.cpp:116:13: note: Assuming the condition is false
  116 |         if (s[i] == 'Y')
      |             ^~~~~~~~~~~
src/date.cpp:116:9: note: Taking false branch
  116 |         if (s[i] == 'Y')
      |         ^
src/date.cpp:127:13: note: Assuming the condition is false
  127 |         if (s[i] == 'M')
      |             ^~~~~~~~~~~
src/date.cpp:127:9: note: Taking false branch
  127 |         if (s[i] == 'M')
      |         ^
src/date.cpp:138:13: note: Assuming the condition is false
  138 |         if (s[i] == 'D')
      |             ^~~~~~~~~~~
src/date.cpp:138:9: note: Taking false branch
  138 |         if (s[i] == 'D')
      |         ^
src/date.cpp:149:13: note: Assuming the condition is false
  149 |         if (s[i] == 'h')
      |             ^~~~~~~~~~~
src/date.cpp:149:9: note: Taking false branch
  149 |         if (s[i] == 'h')
      |         ^
src/date.cpp:160:13: note: Assuming the condition is false
  160 |         if (s[i] == 'm')
      |             ^~~~~~~~~~~
src/date.cpp:160:9: note: Taking false branch
  160 |         if (s[i] == 'm')
      |         ^
src/date.cpp:114:29: note: The value 1 is assigned to 'i'
  114 |     for (int i = 0; i < Ns; ++i)
      |                             ^~~
src/date.cpp:114:21: note: Assuming 'i' is < 'Ns'
  114 |     for (int i = 0; i < Ns; ++i)
      |                     ^~~~~~
src/date.cpp:114:5: note: Loop condition is true.  Entering loop body
  114 |     for (int i = 0; i < Ns; ++i)
      |     ^
src/date.cpp:116:18: note: The left operand of '==' is a garbage value
  116 |         if (s[i] == 'Y')
      |             ~~~~ ^
src/date.cpp:116:18: warning: The left operand of '==' is a garbage value due to array index out of bounds [clang-analyzer-core.UndefinedBinaryOperatorResult]
  116 |         if (s[i] == 'Y')
      |             ~~~~ ^
src/date.cpp:106:15: note: Calling 'multitype::to_str'
  106 |     char *s = format.to_str();
      |               ^~~~~~~~~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking false branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:299:13: note: Taking false branch
  299 |             if (is_type("str"))
      |             ^
include/csv.h:301:13: note: Taking false branch
  301 |             if (is_type("double"))
      |             ^
include/csv.h:328:16: note: Storing uninitialized value
  328 |                         Pchar buf = new Char[1]; buf[0] = '\0';
      |                                     ^~~~~~~~~~~
src/date.cpp:106:15: note: Returning from 'multitype::to_str'
  106 |     char *s = format.to_str();
      |               ^~~~~~~~~~~~~~~
src/date.cpp:108:21: note: Assuming the condition is false
  108 |     for (int i = 0; i < Ns / 2; ++i)
      |                     ^~~~~~~~~~
src/date.cpp:108:5: note: Loop condition is false. Execution continues on line 114
  108 |     for (int i = 0; i < Ns / 2; ++i)
      |     ^
src/date.cpp:114:21: note: Assuming 'i' is < 'Ns'
  114 |     for (int i = 0; i < Ns; ++i)
      |                     ^~~~~~
src/date.cpp:114:5: note: Loop condition is true.  Entering loop body
  114 |     for (int i = 0; i < Ns; ++i)
      |     ^
src/date.cpp:116:9: note: Taking false branch
  116 |         if (s[i] == 'Y')
      |         ^
src/date.cpp:127:9: note: Taking false branch
  127 |         if (s[i] == 'M')
      |         ^
src/date.cpp:138:9: note: Taking false branch
  138 |         if (s[i] == 'D')
      |         ^
src/date.cpp:149:9: note: Taking false branch
  149 |         if (s[i] == 'h')
      |         ^
src/date.cpp:160:9: note: Taking false branch
  160 |         if (s[i] == 'm')
      |         ^
src/date.cpp:114:29: note: The value 1 is assigned to 'i'
  114 |     for (int i = 0; i < Ns; ++i)
      |                             ^~~
src/date.cpp:114:21: note: Assuming 'i' is < 'Ns'
  114 |     for (int i = 0; i < Ns; ++i)
      |                     ^~~~~~
src/date.cpp:114:5: note: Loop condition is true.  Entering loop body
  114 |     for (int i = 0; i < Ns; ++i)
      |     ^
src/date.cpp:116:18: note: The left operand of '==' is a garbage value due to array index out of bounds
  116 |         if (s[i] == 'Y')
      |             ~~~~ ^
src/date.cpp:121:43: warning: The left operand of '==' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
  121 |             while (i + 1 < Ns && s[i + 1] == 'Y')
      |                                  ~~~~~~~~ ^
src/date.cpp:106:15: note: Calling 'multitype::to_str'
  106 |     char *s = format.to_str();
      |               ^~~~~~~~~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking true branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:295:29: note: Storing uninitialized value
  295 |                 Pchar buf = new Char[2];
      |                             ^~~~~~~~~~~
src/date.cpp:106:15: note: Returning from 'multitype::to_str'
  106 |     char *s = format.to_str();
      |               ^~~~~~~~~~~~~~~
src/date.cpp:108:21: note: Assuming the condition is false
  108 |     for (int i = 0; i < Ns / 2; ++i)
      |                     ^~~~~~~~~~
src/date.cpp:108:5: note: Loop condition is false. Execution continues on line 114
  108 |     for (int i = 0; i < Ns / 2; ++i)
      |     ^
src/date.cpp:114:21: note: Assuming 'i' is < 'Ns'
  114 |     for (int i = 0; i < Ns; ++i)
      |                     ^~~~~~
src/date.cpp:114:5: note: Loop condition is true.  Entering loop body
  114 |     for (int i = 0; i < Ns; ++i)
      |     ^
src/date.cpp:116:13: note: Assuming the condition is true
  116 |         if (s[i] == 'Y')
      |             ^~~~~~~~~~~
src/date.cpp:116:9: note: Taking true branch
  116 |         if (s[i] == 'Y')
      |         ^
src/date.cpp:121:20: note: Assuming the condition is true
  121 |             while (i + 1 < Ns && s[i + 1] == 'Y')
      |                    ^~~~~~~~~~
src/date.cpp:121:20: note: Left side of '&&' is true
src/date.cpp:121:43: note: The left operand of '==' is a garbage value
  121 |             while (i + 1 < Ns && s[i + 1] == 'Y')
      |                                  ~~~~~~~~ ^
src/date.cpp:132:43: warning: The left operand of '==' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
  132 |             while (i + 1 < Ns && s[i + 1] == 'M')
      |                                  ~~~~~~~~ ^
src/date.cpp:106:15: note: Calling 'multitype::to_str'
  106 |     char *s = format.to_str();
      |               ^~~~~~~~~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking true branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:295:29: note: Storing uninitialized value
  295 |                 Pchar buf = new Char[2];
      |                             ^~~~~~~~~~~
src/date.cpp:106:15: note: Returning from 'multitype::to_str'
  106 |     char *s = format.to_str();
      |               ^~~~~~~~~~~~~~~
src/date.cpp:108:21: note: Assuming the condition is false
  108 |     for (int i = 0; i < Ns / 2; ++i)
      |                     ^~~~~~~~~~
src/date.cpp:108:5: note: Loop condition is false. Execution continues on line 114
  108 |     for (int i = 0; i < Ns / 2; ++i)
      |     ^
src/date.cpp:114:21: note: Assuming 'i' is < 'Ns'
  114 |     for (int i = 0; i < Ns; ++i)
      |                     ^~~~~~
src/date.cpp:114:5: note: Loop condition is true.  Entering loop body
  114 |     for (int i = 0; i < Ns; ++i)
      |     ^
src/date.cpp:116:13: note: Assuming the condition is false
  116 |         if (s[i] == 'Y')
      |             ^~~~~~~~~~~
src/date.cpp:116:9: note: Taking false branch
  116 |         if (s[i] == 'Y')
      |         ^
src/date.cpp:127:13: note: Assuming the condition is true
  127 |         if (s[i] == 'M')
      |             ^~~~~~~~~~~
src/date.cpp:127:9: note: Taking true branch
  127 |         if (s[i] == 'M')
      |         ^
src/date.cpp:132:20: note: Assuming the condition is true
  132 |             while (i + 1 < Ns && s[i + 1] == 'M')
      |                    ^~~~~~~~~~
src/date.cpp:132:20: note: Left side of '&&' is true
src/date.cpp:132:43: note: The left operand of '==' is a garbage value
  132 |             while (i + 1 < Ns && s[i + 1] == 'M')
      |                                  ~~~~~~~~ ^
src/date.cpp:143:43: warning: The left operand of '==' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
  143 |             while (i + 1 < Ns && s[i + 1] == 'D')
      |                                  ~~~~~~~~ ^
src/date.cpp:106:15: note: Calling 'multitype::to_str'
  106 |     char *s = format.to_str();
      |               ^~~~~~~~~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking true branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:295:29: note: Storing uninitialized value
  295 |                 Pchar buf = new Char[2];
      |                             ^~~~~~~~~~~
src/date.cpp:106:15: note: Returning from 'multitype::to_str'
  106 |     char *s = format.to_str();
      |               ^~~~~~~~~~~~~~~
src/date.cpp:108:21: note: Assuming the condition is false
  108 |     for (int i = 0; i < Ns / 2; ++i)
      |                     ^~~~~~~~~~
src/date.cpp:108:5: note: Loop condition is false. Execution continues on line 114
  108 |     for (int i = 0; i < Ns / 2; ++i)
      |     ^
src/date.cpp:114:21: note: Assuming 'i' is < 'Ns'
  114 |     for (int i = 0; i < Ns; ++i)
      |                     ^~~~~~
src/date.cpp:114:5: note: Loop condition is true.  Entering loop body
  114 |     for (int i = 0; i < Ns; ++i)
      |     ^
src/date.cpp:116:13: note: Assuming the condition is false
  116 |         if (s[i] == 'Y')
      |             ^~~~~~~~~~~
src/date.cpp:116:9: note: Taking false branch
  116 |         if (s[i] == 'Y')
      |         ^
src/date.cpp:127:13: note: Assuming the condition is false
  127 |         if (s[i] == 'M')
      |             ^~~~~~~~~~~
src/date.cpp:127:9: note: Taking false branch
  127 |         if (s[i] == 'M')
      |         ^
src/date.cpp:138:13: note: Assuming the condition is true
  138 |         if (s[i] == 'D')
      |             ^~~~~~~~~~~
src/date.cpp:138:9: note: Taking true branch
  138 |         if (s[i] == 'D')
      |         ^
src/date.cpp:143:20: note: Assuming the condition is true
  143 |             while (i + 1 < Ns && s[i + 1] == 'D')
      |                    ^~~~~~~~~~
src/date.cpp:143:20: note: Left side of '&&' is true
src/date.cpp:143:43: note: The left operand of '==' is a garbage value
  143 |             while (i + 1 < Ns && s[i + 1] == 'D')
      |                                  ~~~~~~~~ ^
src/date.cpp:154:43: warning: The left operand of '==' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
  154 |             while (i + 1 < Ns && s[i + 1] == 'h')
      |                                  ~~~~~~~~ ^
src/date.cpp:106:15: note: Calling 'multitype::to_str'
  106 |     char *s = format.to_str();
      |               ^~~~~~~~~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking true branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:295:29: note: Storing uninitialized value
  295 |                 Pchar buf = new Char[2];
      |                             ^~~~~~~~~~~
src/date.cpp:106:15: note: Returning from 'multitype::to_str'
  106 |     char *s = format.to_str();
      |               ^~~~~~~~~~~~~~~
src/date.cpp:108:21: note: Assuming the condition is false
  108 |     for (int i = 0; i < Ns / 2; ++i)
      |                     ^~~~~~~~~~
src/date.cpp:108:5: note: Loop condition is false. Execution continues on line 114
  108 |     for (int i = 0; i < Ns / 2; ++i)
      |     ^
src/date.cpp:114:21: note: Assuming 'i' is < 'Ns'
  114 |     for (int i = 0; i < Ns; ++i)
      |                     ^~~~~~
src/date.cpp:114:5: note: Loop condition is true.  Entering loop body
  114 |     for (int i = 0; i < Ns; ++i)
      |     ^
src/date.cpp:116:13: note: Assuming the condition is false
  116 |         if (s[i] == 'Y')
      |             ^~~~~~~~~~~
src/date.cpp:116:9: note: Taking false branch
  116 |         if (s[i] == 'Y')
      |         ^
src/date.cpp:127:13: note: Assuming the condition is false
  127 |         if (s[i] == 'M')
      |             ^~~~~~~~~~~
src/date.cpp:127:9: note: Taking false branch
  127 |         if (s[i] == 'M')
      |         ^
src/date.cpp:138:13: note: Assuming the condition is false
  138 |         if (s[i] == 'D')
      |             ^~~~~~~~~~~
src/date.cpp:138:9: note: Taking false branch
  138 |         if (s[i] == 'D')
      |         ^
src/date.cpp:149:13: note: Assuming the condition is true
  149 |         if (s[i] == 'h')
      |             ^~~~~~~~~~~
src/date.cpp:149:9: note: Taking true branch
  149 |         if (s[i] == 'h')
      |         ^
src/date.cpp:154:20: note: Assuming the condition is true
  154 |             while (i + 1 < Ns && s[i + 1] == 'h')
      |                    ^~~~~~~~~~
src/date.cpp:154:20: note: Left side of '&&' is true
src/date.cpp:154:43: note: The left operand of '==' is a garbage value
  154 |             while (i + 1 < Ns && s[i + 1] == 'h')
      |                                  ~~~~~~~~ ^
src/date.cpp:165:43: warning: The left operand of '==' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
  165 |             while (i + 1 < Ns && s[i + 1] == 'm')
      |                                  ~~~~~~~~ ^
src/date.cpp:106:15: note: Calling 'multitype::to_str'
  106 |     char *s = format.to_str();
      |               ^~~~~~~~~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking true branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:295:29: note: Storing uninitialized value
  295 |                 Pchar buf = new Char[2];
      |                             ^~~~~~~~~~~
src/date.cpp:106:15: note: Returning from 'multitype::to_str'
  106 |     char *s = format.to_str();
      |               ^~~~~~~~~~~~~~~
src/date.cpp:108:21: note: Assuming the condition is false
  108 |     for (int i = 0; i < Ns / 2; ++i)
      |                     ^~~~~~~~~~
src/date.cpp:108:5: note: Loop condition is false. Execution continues on line 114
  108 |     for (int i = 0; i < Ns / 2; ++i)
      |     ^
src/date.cpp:114:21: note: Assuming 'i' is < 'Ns'
  114 |     for (int i = 0; i < Ns; ++i)
      |                     ^~~~~~
src/date.cpp:114:5: note: Loop condition is true.  Entering loop body
  114 |     for (int i = 0; i < Ns; ++i)
      |     ^
src/date.cpp:116:13: note: Assuming the condition is false
  116 |         if (s[i] == 'Y')
      |             ^~~~~~~~~~~
src/date.cpp:116:9: note: Taking false branch
  116 |         if (s[i] == 'Y')
      |         ^
src/date.cpp:127:13: note: Assuming the condition is false
  127 |         if (s[i] == 'M')
      |             ^~~~~~~~~~~
src/date.cpp:127:9: note: Taking false branch
  127 |         if (s[i] == 'M')
      |         ^
src/date.cpp:138:13: note: Assuming the condition is false
  138 |         if (s[i] == 'D')
      |             ^~~~~~~~~~~
src/date.cpp:138:9: note: Taking false branch
  138 |         if (s[i] == 'D')
      |         ^
src/date.cpp:149:13: note: Assuming the condition is false
  149 |         if (s[i] == 'h')
      |             ^~~~~~~~~~~
src/date.cpp:149:9: note: Taking false branch
  149 |         if (s[i] == 'h')
      |         ^
src/date.cpp:160:13: note: Assuming the condition is true
  160 |         if (s[i] == 'm')
      |             ^~~~~~~~~~~
src/date.cpp:160:9: note: Taking true branch
  160 |         if (s[i] == 'm')
      |         ^
src/date.cpp:165:20: note: Assuming the condition is true
  165 |             while (i + 1 < Ns && s[i + 1] == 'm')
      |                    ^~~~~~~~~~
src/date.cpp:165:20: note: Left side of '&&' is true
src/date.cpp:165:43: note: The left operand of '==' is a garbage value
  165 |             while (i + 1 < Ns && s[i + 1] == 'm')
      |                                  ~~~~~~~~ ^
src/date.cpp:178:12: warning: Potential leak of memory pointed to by 's' [clang-analyzer-cplusplus.NewDeleteLeaks]
  178 |     return Csv::multitype(s);
      |            ^
src/date.cpp:106:15: note: Calling 'multitype::to_str'
  106 |     char *s = format.to_str();
      |               ^~~~~~~~~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking false branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:299:13: note: Taking false branch
  299 |             if (is_type("str"))
      |             ^
include/csv.h:301:13: note: Taking false branch
  301 |             if (is_type("double"))
      |             ^
include/csv.h:328:16: note: Memory is allocated
  328 |                         Pchar buf = new Char[1]; buf[0] = '\0';
      |                                     ^~~~~~~~~~~
src/date.cpp:106:15: note: Returned allocated memory
  106 |     char *s = format.to_str();
      |               ^~~~~~~~~~~~~~~
src/date.cpp:108:21: note: Assuming the condition is false
  108 |     for (int i = 0; i < Ns / 2; ++i)
      |                     ^~~~~~~~~~
src/date.cpp:108:5: note: Loop condition is false. Execution continues on line 114
  108 |     for (int i = 0; i < Ns / 2; ++i)
      |     ^
src/date.cpp:114:21: note: Assuming 'i' is >= 'Ns'
  114 |     for (int i = 0; i < Ns; ++i)
      |                     ^~~~~~
src/date.cpp:114:5: note: Loop condition is false. Execution continues on line 172
  114 |     for (int i = 0; i < Ns; ++i)
      |     ^
src/date.cpp:172:5: note: Loop condition is false. Execution continues on line 178
  172 |     for (int i = 0; i < Ns / 2; ++i)
      |     ^
src/date.cpp:178:12: note: Potential leak of memory pointed to by 's'
  178 |     return Csv::multitype(s);
      |            ^
src/date.cpp:268:9: warning: Potential leak of memory pointed to by field '_type' [clang-analyzer-unix.Malloc]
  268 |         d = d.add_day(1);
      |         ^
src/date.cpp:259:5: note: Taking false branch
  259 |     if (*this == d)
      |     ^
src/date.cpp:261:5: note: Taking true branch
  261 |     if (*this < d)
      |     ^
src/date.cpp:262:17: note: Calling 'date::substract'
  262 |         return -d.substract(*this);
      |                 ^~~~~~~~~~~~~~~~~~
src/date.cpp:259:5: note: Taking false branch
  259 |     if (*this == d)
      |     ^
src/date.cpp:261:5: note: Taking false branch
  261 |     if (*this < d)
      |     ^
src/date.cpp:266:5: note: Loop condition is true.  Entering loop body
  266 |     while (*this != d)
      |     ^
src/date.cpp:268:23: note: Calling constructor for 'multitype'
  268 |         d = d.add_day(1);
      |                       ^
include/csv.h:67:13: note: Calling 'multitype::assign'
   67 |             assign(e);
      |             ^~~~~~~~~
include/csv.h:99:13: note: Calling 'string_copy'
   99 |             string_copy("int", _type);
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:41:21: note: Memory is allocated
   41 |         to = (Pchar)malloc(strlen(from) + 1);
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:42:9: note: Loop condition is true.  Entering loop body
   42 |         for (Pchar p = to; (*p = *from) != '\0'; ++p, ++from);
      |         ^
include/csv.h:42:9: note: Loop condition is true.  Entering loop body
include/csv.h:42:9: note: Loop condition is true.  Entering loop body
include/csv.h:42:9: note: Loop condition is false. Execution continues on line 42
include/csv.h:99:13: note: Returned allocated memory via 2nd parameter
   99 |             string_copy("int", _type);
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:67:13: note: Returned allocated memory
   67 |             assign(e);
      |             ^~~~~~~~~
src/date.cpp:268:23: note: Returning from constructor for 'multitype'
  268 |         d = d.add_day(1);
      |                       ^
src/date.cpp:268:9: note: Potential leak of memory pointed to by field '_type'
  268 |         d = d.add_day(1);
      |         ^
Suppressed 231 warnings (231 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
730 warnings generated.
include/csv.h:495:13: warning: Memory allocated by 'new' should be deallocated by 'delete', not 'delete[]' [clang-analyzer-unix.MismatchedDeallocator]
  495 |             delete[] head->next;
      |             ^
src/interface.cpp:297:13: note: Assuming '_clrscr' is false
  297 |         if (_clrscr)
      |             ^~~~~~~
src/interface.cpp:297:9: note: Taking false branch
  297 |         if (_clrscr)
      |         ^
src/interface.cpp:305:25: note: Assuming the condition is true
  305 |         for (int i = 0; i < items.num_rows(); ++i)
      |                         ^~~~~~~~~~~~~~~~~~~~
src/interface.cpp:305:9: note: Loop condition is true.  Entering loop body
  305 |         for (int i = 0; i < items.num_rows(); ++i)
      |         ^
src/interface.cpp:306:20: note: '?' condition is false
  306 |             maxl = Max(maxl, (int)strlen(items.get(i, "Description").to_str()));
      |                    ^
include/interface.h:9:19: note: expanded from macro 'Max'
    9 | #define Max(a,b) ((a)>(b)?(a):(b))
      |                   ^
src/interface.cpp:305:25: note: Assuming the condition is false
  305 |         for (int i = 0; i < items.num_rows(); ++i)
      |                         ^~~~~~~~~~~~~~~~~~~~
src/interface.cpp:305:9: note: Loop condition is false. Execution continues on line 307
  305 |         for (int i = 0; i < items.num_rows(); ++i)
      |         ^
src/interface.cpp:307:9: note: Loop condition is true.  Entering loop body
  307 |         for (int i = 0; i < items.num_rows(); ++i)
      |         ^
src/interface.cpp:311:29: note: Assuming the condition is false
  311 |             for (int j = 0; j < maxl - (int)strlen(items.get(i, "Description").to_str()); ++j)
      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/interface.cpp:311:13: note: Loop condition is false. Execution continues on line 313
  311 |             for (int j = 0; j < maxl - (int)strlen(items.get(i, "Description").to_str()); ++j)
      |             ^
src/interface.cpp:313:17: note: Assuming the condition is true
  313 |             if (items.get(i, "Line input").to_int())
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/interface.cpp:313:13: note: Taking true branch
  313 |             if (items.get(i, "Line input").to_int())
      |             ^
src/interface.cpp:314:17: note: Calling 'readline'
  314 |                 readline(std::cin, e);
      |                 ^~~~~~~~~~~~~~~~~~~~~
src/interface.cpp:44:5: note: Loop condition is true.  Entering loop body
   44 |     while (true)
      |     ^
src/interface.cpp:47:13: note: Assuming the condition is false
   47 |         if (c == '\n')
      |             ^~~~~~~~~
src/interface.cpp:47:9: note: Taking false branch
   47 |         if (c == '\n')
      |         ^
src/interface.cpp:49:13: note: Assuming the condition is false
   49 |         if (c == '\r')
      |             ^~~~~~~~~
src/interface.cpp:49:9: note: Taking false branch
   49 |         if (c == '\r')
      |         ^
src/interface.cpp:51:9: note: Calling 'list::push_back'
   51 |         buf.push_back(c);
      |         ^~~~~~~~~~~~~~~~
include/csv.h:456:20: note: Assuming the condition is false
  456 |             while (root->next != nullptr)
      |                    ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:456:13: note: Loop condition is false. Execution continues on line 458
  456 |             while (root->next != nullptr)
      |             ^
include/csv.h:458:26: note: Memory is allocated
  458 |             root->next = new iter();
      |                          ^~~~~~~~~~
src/interface.cpp:51:9: note: Returned allocated memory
   51 |         buf.push_back(c);
      |         ^~~~~~~~~~~~~~~~
src/interface.cpp:44:5: note: Loop condition is true.  Entering loop body
   44 |     while (true)
      |     ^
src/interface.cpp:47:13: note: Assuming the condition is true
   47 |         if (c == '\n')
      |             ^~~~~~~~~
src/interface.cpp:47:9: note: Taking true branch
   47 |         if (c == '\n')
      |         ^
src/interface.cpp:48:13: note:  Execution continues on line 55
   48 |             break;
      |             ^
src/interface.cpp:58:5: note: Loop condition is true.  Entering loop body
   58 |     while (!buf.empty())
      |     ^
src/interface.cpp:59:20: note: Calling 'list::pop_front'
   59 |         str[i++] = buf.pop_front();
      |                    ^~~~~~~~~~~~~~~
include/csv.h:491:13: note: Taking false branch
  491 |             if (empty())
      |             ^
include/csv.h:495:13: note: Memory allocated by 'new' should be deallocated by 'delete', not 'delete[]'
  495 |             delete[] head->next;
      |             ^        ~~~~~~~~~~
src/interface.cpp:12:13: warning: use auto when initializing with a template cast to avoid duplicating the type name [modernize-use-auto]
   12 |             std::ctype<char> const& ctype(std::use_facet<std::ctype<char> >(in.getloc()));
      |             ^~~~~~~~~~~~~~~~
      |             auto
src/interface.cpp:23:13: warning: Potential leak of memory pointed to by 'buf.head' [clang-analyzer-cplusplus.NewDeleteLeaks]
   23 |             e.assign(str);
      |             ^
src/interface.cpp:297:13: note: Assuming '_clrscr' is false
  297 |         if (_clrscr)
      |             ^~~~~~~
src/interface.cpp:297:9: note: Taking false branch
  297 |         if (_clrscr)
      |         ^
src/interface.cpp:305:25: note: Assuming the condition is true
  305 |         for (int i = 0; i < items.num_rows(); ++i)
      |                         ^~~~~~~~~~~~~~~~~~~~
src/interface.cpp:305:9: note: Loop condition is true.  Entering loop body
  305 |         for (int i = 0; i < items.num_rows(); ++i)
      |         ^
src/interface.cpp:306:20: note: '?' condition is false
  306 |             maxl = Max(maxl, (int)strlen(items.get(i, "Description").to_str()));
      |                    ^
include/interface.h:9:19: note: expanded from macro 'Max'
    9 | #define Max(a,b) ((a)>(b)?(a):(b))
      |                   ^
src/interface.cpp:305:25: note: Assuming the condition is false
  305 |         for (int i = 0; i < items.num_rows(); ++i)
      |                         ^~~~~~~~~~~~~~~~~~~~
src/interface.cpp:305:9: note: Loop condition is false. Execution continues on line 307
  305 |         for (int i = 0; i < items.num_rows(); ++i)
      |         ^
src/interface.cpp:307:9: note: Loop condition is true.  Entering loop body
  307 |         for (int i = 0; i < items.num_rows(); ++i)
      |         ^
src/interface.cpp:311:29: note: Assuming the condition is false
  311 |             for (int j = 0; j < maxl - (int)strlen(items.get(i, "Description").to_str()); ++j)
      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/interface.cpp:311:13: note: Loop condition is false. Execution continues on line 313
  311 |             for (int j = 0; j < maxl - (int)strlen(items.get(i, "Description").to_str()); ++j)
      |             ^
src/interface.cpp:313:17: note: Assuming the condition is false
  313 |             if (items.get(i, "Line input").to_int())
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/interface.cpp:313:13: note: Taking false branch
  313 |             if (items.get(i, "Line input").to_int())
      |             ^
src/interface.cpp:316:17: note: Calling 'operator>>'
  316 |                 std::cin >> e;
      |                 ^~~~~~~~~~~~~
src/interface.cpp:6:9: note: Assuming the condition is true
    6 |     if (cerberos)
      |         ^~~~~~~~
src/interface.cpp:6:5: note: Taking true branch
    6 |     if (cerberos)
      |     ^
src/interface.cpp:10:9: note: Taking true branch
   10 |         if (it != end)
      |         ^
src/interface.cpp:13:29: note: Calling default constructor for 'list<char>'
   13 |             Csv::list<char> buf;
      |                             ^~~
include/csv.h:438:20: note: Memory is allocated
  438 |             head = new iter();
      |                    ^~~~~~~~~~
include/csv.h:440:13: note: Loop condition is false. Execution continues on line 440
  440 |             for (Int i = 0; i < num_elms; ++i)
      |             ^
src/interface.cpp:13:29: note: Returning from default constructor for 'list<char>'
   13 |             Csv::list<char> buf;
      |                             ^~~
src/interface.cpp:14:30: note: Left side of '&&' is false
   14 |             for (; it != end && !ctype.is(std::ctype_base::space, *it); ++it)
      |                              ^
src/interface.cpp:21:13: note: Loop condition is false. Execution continues on line 23
   21 |             while (!buf.empty())
      |             ^
src/interface.cpp:23:13: note: Potential leak of memory pointed to by 'buf.head'
   23 |             e.assign(str);
      |             ^
src/interface.cpp:33:5: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
   33 |     return out << e.to_str();
      |     ^
src/interface.cpp:297:13: note: Assuming '_clrscr' is false
  297 |         if (_clrscr)
      |             ^~~~~~~
src/interface.cpp:297:9: note: Taking false branch
  297 |         if (_clrscr)
      |         ^
src/interface.cpp:299:9: note: Calling 'operator<<'
  299 |         out << "[ INPUT: " << title << " ]" << std::endl
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/interface.cpp:33:19: note: Calling 'multitype::to_str'
   33 |     return out << e.to_str();
      |                   ^~~~~~~~~~
include/csv.h:281:13: note: Taking true branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:283:29: note: Memory is allocated
  283 |                 Pchar buf = new Char[STR_BUFFER];
      |                             ^~~~~~~~~~~~~~~~~~~~
src/interface.cpp:33:19: note: Returned allocated memory
   33 |     return out << e.to_str();
      |                   ^~~~~~~~~~
src/interface.cpp:33:5: note: Potential memory leak
   33 |     return out << e.to_str();
      |     ^
src/interface.cpp:60:5: warning: Potential leak of memory pointed to by 'buf.head' [clang-analyzer-cplusplus.NewDeleteLeaks]
   60 |     e.assign(str);
      |     ^
src/interface.cpp:297:13: note: Assuming '_clrscr' is false
  297 |         if (_clrscr)
      |             ^~~~~~~
src/interface.cpp:297:9: note: Taking false branch
  297 |         if (_clrscr)
      |         ^
src/interface.cpp:305:25: note: Assuming the condition is true
  305 |         for (int i = 0; i < items.num_rows(); ++i)
      |                         ^~~~~~~~~~~~~~~~~~~~
src/interface.cpp:305:9: note: Loop condition is true.  Entering loop body
  305 |         for (int i = 0; i < items.num_rows(); ++i)
      |         ^
src/interface.cpp:306:20: note: '?' condition is false
  306 |             maxl = Max(maxl, (int)strlen(items.get(i, "Description").to_str()));
      |                    ^
include/interface.h:9:19: note: expanded from macro 'Max'
    9 | #define Max(a,b) ((a)>(b)?(a):(b))
      |                   ^
src/interface.cpp:305:25: note: Assuming the condition is false
  305 |         for (int i = 0; i < items.num_rows(); ++i)
      |                         ^~~~~~~~~~~~~~~~~~~~
src/interface.cpp:305:9: note: Loop condition is false. Execution continues on line 307
  305 |         for (int i = 0; i < items.num_rows(); ++i)
      |         ^
src/interface.cpp:307:9: note: Loop condition is true.  Entering loop body
  307 |         for (int i = 0; i < items.num_rows(); ++i)
      |         ^
src/interface.cpp:311:29: note: Assuming the condition is false
  311 |             for (int j = 0; j < maxl - (int)strlen(items.get(i, "Description").to_str()); ++j)
      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/interface.cpp:311:13: note: Loop condition is false. Execution continues on line 313
  311 |             for (int j = 0; j < maxl - (int)strlen(items.get(i, "Description").to_str()); ++j)
      |             ^
src/interface.cpp:313:17: note: Assuming the condition is true
  313 |             if (items.get(i, "Line input").to_int())
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/interface.cpp:313:13: note: Taking true branch
  313 |             if (items.get(i, "Line input").to_int())
      |             ^
src/interface.cpp:314:17: note: Calling 'readline'
  314 |                 readline(std::cin, e);
      |                 ^~~~~~~~~~~~~~~~~~~~~
src/interface.cpp:42:21: note: Calling default constructor for 'list<char>'
   42 |     Csv::list<char> buf;
      |                     ^~~
include/csv.h:438:20: note: Memory is allocated
  438 |             head = new iter();
      |                    ^~~~~~~~~~
include/csv.h:440:13: note: Loop condition is false. Execution continues on line 440
  440 |             for (Int i = 0; i < num_elms; ++i)
      |             ^
src/interface.cpp:42:21: note: Returning from default constructor for 'list<char>'
   42 |     Csv::list<char> buf;
      |                     ^~~
src/interface.cpp:44:5: note: Loop condition is true.  Entering loop body
   44 |     while (true)
      |     ^
src/interface.cpp:47:13: note: Assuming the condition is true
   47 |         if (c == '\n')
      |             ^~~~~~~~~
src/interface.cpp:47:9: note: Taking true branch
   47 |         if (c == '\n')
      |         ^
src/interface.cpp:48:13: note:  Execution continues on line 55
   48 |             break;
      |             ^
src/interface.cpp:58:5: note: Loop condition is false. Execution continues on line 60
   58 |     while (!buf.empty())
      |     ^
src/interface.cpp:60:5: note: Potential leak of memory pointed to by 'buf.head'
   60 |     e.assign(str);
      |     ^
src/interface.cpp:205:39: warning: Potential leak of memory pointed to by 'maxl.head' [clang-analyzer-cplusplus.NewDeleteLeaks]
  205 |             out << "  Table is empty" << std::endl;
      |                                       ^
src/interface.cpp:107:13: note: Assuming '_clrscr' is false
  107 |         if (_clrscr)
      |             ^~~~~~~
src/interface.cpp:107:9: note: Taking false branch
  107 |         if (_clrscr)
      |         ^
src/interface.cpp:113:19: note: Calling default constructor for 'list<int>'
  113 |         list<int> maxl;
      |                   ^~~~
include/csv.h:438:20: note: Memory is allocated
  438 |             head = new iter();
      |                    ^~~~~~~~~~
include/csv.h:440:13: note: Loop condition is false. Execution continues on line 440
  440 |             for (Int i = 0; i < num_elms; ++i)
      |             ^
src/interface.cpp:113:19: note: Returning from default constructor for 'list<int>'
  113 |         list<int> maxl;
      |                   ^~~~
src/interface.cpp:117:25: note: Assuming 'i' is >= 'Ncols'
  117 |         for (int i = 0; i < Ncols; ++i)
      |                         ^~~~~~~~~
src/interface.cpp:117:9: note: Loop condition is false. Execution continues on line 119
  117 |         for (int i = 0; i < Ncols; ++i)
      |         ^
src/interface.cpp:119:25: note: Assuming 'i' is >= 'Nrows'
  119 |         for (int i = 0; i < Nrows; ++i)
      |                         ^~~~~~~~~
src/interface.cpp:119:9: note: Loop condition is false. Execution continues on line 127
  119 |         for (int i = 0; i < Nrows; ++i)
      |         ^
src/interface.cpp:127:13: note: 'Nrows' is <= 0
  127 |         if (Nrows > 0)
      |             ^~~~~
src/interface.cpp:127:9: note: Taking false branch
  127 |         if (Nrows > 0)
      |         ^
src/interface.cpp:205:39: note: Potential leak of memory pointed to by 'maxl.head'
  205 |             out << "  Table is empty" << std::endl;
      |                                       ^
Suppressed 724 warnings (724 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
731 warnings generated.
include/csv.h:175:60: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                                                            ^
src/lecturer.cpp:166:25: note: Assuming 'i' is >= 'Nrows'
  166 |         for (int i = 0; i < Nrows;i++)
      |                         ^~~~~~~~~
src/lecturer.cpp:166:9: note: Loop condition is false. Execution continues on line 168
  166 |         for (int i = 0; i < Nrows;i++)
      |         ^
src/lecturer.cpp:174:17: note: Assuming 'chosen' is >= 1
  174 |             if (chosen >=1 && chosen <= Nrows)
      |                 ^~~~~~~~~~
src/lecturer.cpp:174:17: note: Left side of '&&' is true
src/lecturer.cpp:174:31: note: Assuming 'chosen' is <= 'Nrows'
  174 |             if (chosen >=1 && chosen <= Nrows)
      |                               ^~~~~~~~~~~~~~~
src/lecturer.cpp:174:13: note: Taking true branch
  174 |             if (chosen >=1 && chosen <= Nrows)
      |             ^
src/lecturer.cpp:181:17: note: Loop condition is false. Execution continues on line 184
  181 |                 for (int i = 0; i < courselecturer_table.num_rows(); ++i)
      |                 ^
src/lecturer.cpp:185:40: note: Calling 'multitype::append'
  185 |                                        multitype("List of lecturers in ").append(courseID));
      |                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:171:25: note: Calling 'multitype::to_str'
  171 |             Char *cur = to_str(),
      |                         ^~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking false branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:299:13: note: Taking false branch
  299 |             if (is_type("str"))
      |             ^
include/csv.h:301:13: note: Taking false branch
  301 |             if (is_type("double"))
      |             ^
include/csv.h:328:16: note: Storing uninitialized value
  328 |                         Pchar buf = new Char[1]; buf[0] = '\0';
      |                                     ^~~~~~~~~~~
include/csv.h:171:25: note: Returning from 'multitype::to_str'
  171 |             Char *cur = to_str(),
      |                         ^~~~~~~~
include/csv.h:175:29: note: Assuming the condition is true
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:175:13: note: Loop condition is true.  Entering loop body
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |             ^
include/csv.h:175:29: note: Assuming the condition is true
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:175:13: note: Loop condition is true.  Entering loop body
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |             ^
include/csv.h:175:60: note: Assigned value is garbage or undefined
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                                                            ^ ~~~~~~~~
include/csv.h:176:26: warning: Potential leak of memory pointed to by 'cur' [clang-analyzer-cplusplus.NewDeleteLeaks]
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                          ^
src/lecturer.cpp:166:25: note: Assuming 'i' is >= 'Nrows'
  166 |         for (int i = 0; i < Nrows;i++)
      |                         ^~~~~~~~~
src/lecturer.cpp:166:9: note: Loop condition is false. Execution continues on line 168
  166 |         for (int i = 0; i < Nrows;i++)
      |         ^
src/lecturer.cpp:174:17: note: Assuming 'chosen' is >= 1
  174 |             if (chosen >=1 && chosen <= Nrows)
      |                 ^~~~~~~~~~
src/lecturer.cpp:174:17: note: Left side of '&&' is true
src/lecturer.cpp:174:31: note: Assuming 'chosen' is <= 'Nrows'
  174 |             if (chosen >=1 && chosen <= Nrows)
      |                               ^~~~~~~~~~~~~~~
src/lecturer.cpp:174:13: note: Taking true branch
  174 |             if (chosen >=1 && chosen <= Nrows)
      |             ^
src/lecturer.cpp:181:17: note: Loop condition is false. Execution continues on line 184
  181 |                 for (int i = 0; i < courselecturer_table.num_rows(); ++i)
      |                 ^
src/lecturer.cpp:185:40: note: Calling 'multitype::append'
  185 |                                        multitype("List of lecturers in ").append(courseID));
      |                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:171:25: note: Calling 'multitype::to_str'
  171 |             Char *cur = to_str(),
      |                         ^~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking false branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:299:13: note: Taking false branch
  299 |             if (is_type("str"))
      |             ^
include/csv.h:301:13: note: Taking false branch
  301 |             if (is_type("double"))
      |             ^
include/csv.h:328:16: note: Memory is allocated
  328 |                         Pchar buf = new Char[1]; buf[0] = '\0';
      |                                     ^~~~~~~~~~~
include/csv.h:171:25: note: Returned allocated memory
  171 |             Char *cur = to_str(),
      |                         ^~~~~~~~
include/csv.h:175:29: note: Assuming the condition is false
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:175:13: note: Loop condition is false. Execution continues on line 176
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |             ^
include/csv.h:176:26: note: Potential leak of memory pointed to by 'cur'
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                          ^
include/csv.h:176:60: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                                                            ^
src/lecturer.cpp:166:25: note: Assuming 'i' is >= 'Nrows'
  166 |         for (int i = 0; i < Nrows;i++)
      |                         ^~~~~~~~~
src/lecturer.cpp:166:9: note: Loop condition is false. Execution continues on line 168
  166 |         for (int i = 0; i < Nrows;i++)
      |         ^
src/lecturer.cpp:174:17: note: Assuming 'chosen' is >= 1
  174 |             if (chosen >=1 && chosen <= Nrows)
      |                 ^~~~~~~~~~
src/lecturer.cpp:174:17: note: Left side of '&&' is true
src/lecturer.cpp:174:31: note: Assuming 'chosen' is <= 'Nrows'
  174 |             if (chosen >=1 && chosen <= Nrows)
      |                               ^~~~~~~~~~~~~~~
src/lecturer.cpp:174:13: note: Taking true branch
  174 |             if (chosen >=1 && chosen <= Nrows)
      |             ^
src/lecturer.cpp:181:17: note: Loop condition is false. Execution continues on line 184
  181 |                 for (int i = 0; i < courselecturer_table.num_rows(); ++i)
      |                 ^
src/lecturer.cpp:185:40: note: Calling 'multitype::append'
  185 |                                        multitype("List of lecturers in ").append(courseID));
      |                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:172:25: note: Calling 'multitype::to_str'
  172 |                  *app = e.to_str(),
      |                         ^~~~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking false branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:299:13: note: Taking false branch
  299 |             if (is_type("str"))
      |             ^
include/csv.h:301:13: note: Taking false branch
  301 |             if (is_type("double"))
      |             ^
include/csv.h:328:16: note: Storing uninitialized value
  328 |                         Pchar buf = new Char[1]; buf[0] = '\0';
      |                                     ^~~~~~~~~~~
include/csv.h:172:25: note: Returning from 'multitype::to_str'
  172 |                  *app = e.to_str(),
      |                         ^~~~~~~~~~
include/csv.h:175:29: note: Assuming the condition is false
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:175:13: note: Loop condition is false. Execution continues on line 176
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |             ^
include/csv.h:176:29: note: Assuming the condition is true
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:176:13: note: Loop condition is true.  Entering loop body
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |             ^
include/csv.h:176:29: note: Assuming the condition is true
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:176:13: note: Loop condition is true.  Entering loop body
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |             ^
include/csv.h:176:60: note: Assigned value is garbage or undefined
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                                                            ^ ~~~~~~~~
include/csv.h:177:22: warning: Potential leak of memory pointed to by 'app' [clang-analyzer-cplusplus.NewDeleteLeaks]
  177 |             res[j] = '\0';
      |                      ^
src/lecturer.cpp:166:25: note: Assuming 'i' is >= 'Nrows'
  166 |         for (int i = 0; i < Nrows;i++)
      |                         ^~~~~~~~~
src/lecturer.cpp:166:9: note: Loop condition is false. Execution continues on line 168
  166 |         for (int i = 0; i < Nrows;i++)
      |         ^
src/lecturer.cpp:174:17: note: Assuming 'chosen' is >= 1
  174 |             if (chosen >=1 && chosen <= Nrows)
      |                 ^~~~~~~~~~
src/lecturer.cpp:174:17: note: Left side of '&&' is true
src/lecturer.cpp:174:31: note: Assuming 'chosen' is <= 'Nrows'
  174 |             if (chosen >=1 && chosen <= Nrows)
      |                               ^~~~~~~~~~~~~~~
src/lecturer.cpp:174:13: note: Taking true branch
  174 |             if (chosen >=1 && chosen <= Nrows)
      |             ^
src/lecturer.cpp:181:17: note: Loop condition is false. Execution continues on line 184
  181 |                 for (int i = 0; i < courselecturer_table.num_rows(); ++i)
      |                 ^
src/lecturer.cpp:185:40: note: Calling 'multitype::append'
  185 |                                        multitype("List of lecturers in ").append(courseID));
      |                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:172:25: note: Calling 'multitype::to_str'
  172 |                  *app = e.to_str(),
      |                         ^~~~~~~~~~
include/csv.h:281:13: note: Taking true branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:283:29: note: Memory is allocated
  283 |                 Pchar buf = new Char[STR_BUFFER];
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:172:25: note: Returned allocated memory
  172 |                  *app = e.to_str(),
      |                         ^~~~~~~~~~
include/csv.h:175:29: note: Assuming the condition is false
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:175:13: note: Loop condition is false. Execution continues on line 176
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |             ^
include/csv.h:176:29: note: Assuming the condition is false
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:176:13: note: Loop condition is false. Execution continues on line 177
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |             ^
include/csv.h:177:22: note: Potential leak of memory pointed to by 'app'
  177 |             res[j] = '\0';
      |                      ^
include/csv.h:385:17: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
  385 |                 return strcmp(to_str(), e.to_str()) == 0;
      |                 ^
src/lecturer.cpp:166:25: note: Assuming 'i' is >= 'Nrows'
  166 |         for (int i = 0; i < Nrows;i++)
      |                         ^~~~~~~~~
src/lecturer.cpp:166:9: note: Loop condition is false. Execution continues on line 168
  166 |         for (int i = 0; i < Nrows;i++)
      |         ^
src/lecturer.cpp:174:17: note: Assuming 'chosen' is >= 1
  174 |             if (chosen >=1 && chosen <= Nrows)
      |                 ^~~~~~~~~~
src/lecturer.cpp:174:17: note: Left side of '&&' is true
src/lecturer.cpp:174:31: note: Assuming 'chosen' is <= 'Nrows'
  174 |             if (chosen >=1 && chosen <= Nrows)
      |                               ^~~~~~~~~~~~~~~
src/lecturer.cpp:174:13: note: Taking true branch
  174 |             if (chosen >=1 && chosen <= Nrows)
      |             ^
src/lecturer.cpp:181:17: note: Loop condition is false. Execution continues on line 184
  181 |                 for (int i = 0; i < courselecturer_table.num_rows(); ++i)
      |                 ^
src/lecturer.cpp:184:40: note: Calling 'table::filter'
  184 |                 Interface::print_table(lecturers.get_table().filter(__lecturers_filter_lecturerIDs_func),
      |                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:872:29: note: Assuming 'i' is < 'Nrows'
  872 |             for (int i = 0; i < Nrows; ++i)
      |                             ^~~~~~~~~
include/csv.h:872:13: note: Loop condition is true.  Entering loop body
  872 |             for (int i = 0; i < Nrows; ++i)
      |             ^
include/csv.h:873:17: note: Loop condition is true.  Entering loop body
  873 |                 for (int j = 0; j < Nkeys; ++j)
      |                 ^
include/csv.h:874:25: note: Calling '__lecturers_filter_lecturerIDs_func'
  874 |                     if (_filter_func(get_keys().at(j), get_row(i), (*this)))
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/lecturer.cpp:15:21: note: Assuming the condition is true
   15 |     for (int i = 0; i < __lecturers_filter_lecturerIDs.size(); ++i)
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/lecturer.cpp:15:5: note: Loop condition is true.  Entering loop body
   15 |     for (int i = 0; i < __lecturers_filter_lecturerIDs.size(); ++i)
      |     ^
src/lecturer.cpp:16:13: note: Calling 'multitype::equal'
   16 |         if (row.at(tabl.get_key("Username")).equal(__lecturers_filter_lecturerIDs.at(i)))
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:382:13: note: Taking false branch
  382 |             if (is_type(e.type()))
      |             ^
include/csv.h:384:32: note: Left side of '||' is true
  384 |             if (is_type("str") || e.is_type("str"))
      |                                ^
include/csv.h:385:31: note: Calling 'multitype::to_str'
  385 |                 return strcmp(to_str(), e.to_str()) == 0;
      |                               ^~~~~~~~
include/csv.h:281:13: note: Taking true branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:283:29: note: Memory is allocated
  283 |                 Pchar buf = new Char[STR_BUFFER];
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:385:31: note: Returned allocated memory
  385 |                 return strcmp(to_str(), e.to_str()) == 0;
      |                               ^~~~~~~~
include/csv.h:385:24: note: Assuming the condition is false
  385 |                 return strcmp(to_str(), e.to_str()) == 0;
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:385:17: note: Potential memory leak
  385 |                 return strcmp(to_str(), e.to_str()) == 0;
      |                 ^
include/csv.h:880:26: warning: Potential leak of memory pointed to by 'markCol' [clang-analyzer-cplusplus.NewDeleteLeaks]
  880 |             for (int i = 0; i < Nrows; ++i)
      |                          ^
src/lecturer.cpp:166:25: note: Assuming 'i' is >= 'Nrows'
  166 |         for (int i = 0; i < Nrows;i++)
      |                         ^~~~~~~~~
src/lecturer.cpp:166:9: note: Loop condition is false. Execution continues on line 168
  166 |         for (int i = 0; i < Nrows;i++)
      |         ^
src/lecturer.cpp:174:17: note: Assuming 'chosen' is >= 1
  174 |             if (chosen >=1 && chosen <= Nrows)
      |                 ^~~~~~~~~~
src/lecturer.cpp:174:17: note: Left side of '&&' is true
src/lecturer.cpp:174:31: note: Assuming 'chosen' is <= 'Nrows'
  174 |             if (chosen >=1 && chosen <= Nrows)
      |                               ^~~~~~~~~~~~~~~
src/lecturer.cpp:174:13: note: Taking true branch
  174 |             if (chosen >=1 && chosen <= Nrows)
      |             ^
src/lecturer.cpp:178:51: note: Calling 'table::filter'
  178 |                 Csv::table courselecturer_table = courselecturer.get_table().filter(__courselecturer_filter_courseID_func);
      |                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:869:57: note: Memory is allocated
  869 |             bool *markRow = new bool[Nrows], *markCol = new bool[Nkeys];
      |                                                         ^~~~~~~~~~~~~~~
include/csv.h:872:29: note: Assuming 'i' is >= 'Nrows'
  872 |             for (int i = 0; i < Nrows; ++i)
      |                             ^~~~~~~~~
include/csv.h:872:13: note: Loop condition is false. Execution continues on line 876
  872 |             for (int i = 0; i < Nrows; ++i)
      |             ^
include/csv.h:877:13: note: Loop condition is false. Execution continues on line 880
  877 |             for (int i = 0; i < Nkeys; ++i)
      |             ^
include/csv.h:880:26: note: Potential leak of memory pointed to by 'markCol'
  880 |             for (int i = 0; i < Nrows; ++i)
      |                          ^
include/csv.h:887:20: warning: Potential leak of memory pointed to by 'markRow' [clang-analyzer-cplusplus.NewDeleteLeaks]
  887 |             return new_table;
      |                    ^
src/lecturer.cpp:166:25: note: Assuming 'i' is >= 'Nrows'
  166 |         for (int i = 0; i < Nrows;i++)
      |                         ^~~~~~~~~
src/lecturer.cpp:166:9: note: Loop condition is false. Execution continues on line 168
  166 |         for (int i = 0; i < Nrows;i++)
      |         ^
src/lecturer.cpp:174:17: note: Assuming 'chosen' is >= 1
  174 |             if (chosen >=1 && chosen <= Nrows)
      |                 ^~~~~~~~~~
src/lecturer.cpp:174:17: note: Left side of '&&' is true
src/lecturer.cpp:174:31: note: Assuming 'chosen' is <= 'Nrows'
  174 |             if (chosen >=1 && chosen <= Nrows)
      |                               ^~~~~~~~~~~~~~~
src/lecturer.cpp:174:13: note: Taking true branch
  174 |             if (chosen >=1 && chosen <= Nrows)
      |             ^
src/lecturer.cpp:178:51: note: Calling 'table::filter'
  178 |                 Csv::table courselecturer_table = courselecturer.get_table().filter(__courselecturer_filter_courseID_func);
      |                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:869:29: note: Memory is allocated
  869 |             bool *markRow = new bool[Nrows], *markCol = new bool[Nkeys];
      |                             ^~~~~~~~~~~~~~~
include/csv.h:872:29: note: Assuming 'i' is >= 'Nrows'
  872 |             for (int i = 0; i < Nrows; ++i)
      |                             ^~~~~~~~~
include/csv.h:872:13: note: Loop condition is false. Execution continues on line 876
  872 |             for (int i = 0; i < Nrows; ++i)
      |             ^
include/csv.h:877:13: note: Loop condition is false. Execution continues on line 880
  877 |             for (int i = 0; i < Nkeys; ++i)
      |             ^
include/csv.h:880:29: note: 'i' is >= 'Nrows'
  880 |             for (int i = 0; i < Nrows; ++i)
      |                             ^
include/csv.h:880:13: note: Loop condition is false. Execution continues on line 887
  880 |             for (int i = 0; i < Nrows; ++i)
      |             ^
include/csv.h:887:20: note: Potential leak of memory pointed to by 'markRow'
  887 |             return new_table;
      |                    ^
src/lecturer.cpp:167:13: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
  167 |             select.add_item(i + 1, course_table.get_row(i).at(0));
      |             ^
src/lecturer.cpp:166:25: note: Assuming 'i' is < 'Nrows'
  166 |         for (int i = 0; i < Nrows;i++)
      |                         ^~~~~~~~~
src/lecturer.cpp:166:9: note: Loop condition is true.  Entering loop body
  166 |         for (int i = 0; i < Nrows;i++)
      |         ^
src/lecturer.cpp:167:36: note: Calling 'table::get_row'
  167 |             select.add_item(i + 1, course_table.get_row(i).at(0));
      |                                    ^~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:726:17: note: 'row' is >= 0
  726 |             if (row < 0 || row >= _num_rows)
      |                 ^~~
include/csv.h:726:17: note: Left side of '||' is false
include/csv.h:726:28: note: 'row' is < field '_num_rows'
  726 |             if (row < 0 || row >= _num_rows)
      |                            ^~~
include/csv.h:726:13: note: Taking false branch
  726 |             if (row < 0 || row >= _num_rows)
      |             ^
include/csv.h:729:26: note: Left side of '&&' is false
  729 |             while (row-- && head->next != nullptr)
      |                          ^
include/csv.h:731:11: note: Assuming the condition is false
  731 |                         return head->next != nullptr ? head->next->value : *new list<multitype>();
      |                                ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:731:11: note: '?' condition is false
include/csv.h:731:56: note: Memory is allocated
  731 |                         return head->next != nullptr ? head->next->value : *new list<multitype>();
      |                                                                             ^~~~~~~~~~~~~~~~~~~~~
src/lecturer.cpp:167:36: note: Returned allocated memory
  167 |             select.add_item(i + 1, course_table.get_row(i).at(0));
      |                                    ^~~~~~~~~~~~~~~~~~~~~~~
src/lecturer.cpp:167:13: note: Potential memory leak
  167 |             select.add_item(i + 1, course_table.get_row(i).at(0));
      |             ^
src/lecturer.cpp:176:43: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
  176 |                 Csv::multitype courseID = course_table.get_row(chosen - 1).at(0);
      |                                           ^
src/lecturer.cpp:166:25: note: Assuming 'i' is >= 'Nrows'
  166 |         for (int i = 0; i < Nrows;i++)
      |                         ^~~~~~~~~
src/lecturer.cpp:166:9: note: Loop condition is false. Execution continues on line 168
  166 |         for (int i = 0; i < Nrows;i++)
      |         ^
src/lecturer.cpp:174:17: note: Assuming 'chosen' is >= 1
  174 |             if (chosen >=1 && chosen <= Nrows)
      |                 ^~~~~~~~~~
src/lecturer.cpp:174:17: note: Left side of '&&' is true
src/lecturer.cpp:174:31: note: Assuming 'chosen' is <= 'Nrows'
  174 |             if (chosen >=1 && chosen <= Nrows)
      |                               ^~~~~~~~~~~~~~~
src/lecturer.cpp:174:13: note: Taking true branch
  174 |             if (chosen >=1 && chosen <= Nrows)
      |             ^
src/lecturer.cpp:176:43: note: Calling 'table::get_row'
  176 |                 Csv::multitype courseID = course_table.get_row(chosen - 1).at(0);
      |                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:726:17: note: 'row' is >= 0
  726 |             if (row < 0 || row >= _num_rows)
      |                 ^~~
include/csv.h:726:17: note: Left side of '||' is false
include/csv.h:726:28: note: Assuming 'row' is >= field '_num_rows'
  726 |             if (row < 0 || row >= _num_rows)
      |                            ^~~~~~~~~~~~~~~~
include/csv.h:726:13: note: Taking true branch
  726 |             if (row < 0 || row >= _num_rows)
      |             ^
include/csv.h:727:25: note: Memory is allocated
  727 |                 return *new list<multitype>();
      |                         ^~~~~~~~~~~~~~~~~~~~~
src/lecturer.cpp:176:43: note: Returned allocated memory
  176 |                 Csv::multitype courseID = course_table.get_row(chosen - 1).at(0);
      |                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/lecturer.cpp:176:43: note: Potential memory leak
src/lecturer.cpp:184:17: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
  184 |                 Interface::print_table(lecturers.get_table().filter(__lecturers_filter_lecturerIDs_func),
      |                 ^
src/lecturer.cpp:166:25: note: Assuming 'i' is >= 'Nrows'
  166 |         for (int i = 0; i < Nrows;i++)
      |                         ^~~~~~~~~
src/lecturer.cpp:166:9: note: Loop condition is false. Execution continues on line 168
  166 |         for (int i = 0; i < Nrows;i++)
      |         ^
src/lecturer.cpp:174:17: note: Assuming 'chosen' is >= 1
  174 |             if (chosen >=1 && chosen <= Nrows)
      |                 ^~~~~~~~~~
src/lecturer.cpp:174:17: note: Left side of '&&' is true
src/lecturer.cpp:174:31: note: Assuming 'chosen' is <= 'Nrows'
  174 |             if (chosen >=1 && chosen <= Nrows)
      |                               ^~~~~~~~~~~~~~~
src/lecturer.cpp:174:13: note: Taking true branch
  174 |             if (chosen >=1 && chosen <= Nrows)
      |             ^
src/lecturer.cpp:178:51: note: Calling 'table::filter'
  178 |                 Csv::table courselecturer_table = courselecturer.get_table().filter(__courselecturer_filter_courseID_func);
      |                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:872:29: note: Assuming 'i' is >= 'Nrows'
  872 |             for (int i = 0; i < Nrows; ++i)
      |                             ^~~~~~~~~
include/csv.h:872:13: note: Loop condition is false. Execution continues on line 876
  872 |             for (int i = 0; i < Nrows; ++i)
      |             ^
include/csv.h:876:19: note: Calling default constructor for 'table'
  876 |             table new_table;
      |                   ^~~~~~~~~
include/csv.h:594:20: note: Memory is allocated
  594 |             rows = new plist();
      |                    ^~~~~~~~~~~
include/csv.h:876:19: note: Returning from default constructor for 'table'
  876 |             table new_table;
      |                   ^~~~~~~~~
include/csv.h:877:13: note: Loop condition is false. Execution continues on line 880
  877 |             for (int i = 0; i < Nkeys; ++i)
      |             ^
include/csv.h:880:29: note: 'i' is >= 'Nrows'
  880 |             for (int i = 0; i < Nrows; ++i)
      |                             ^
include/csv.h:880:13: note: Loop condition is false. Execution continues on line 887
  880 |             for (int i = 0; i < Nrows; ++i)
      |             ^
src/lecturer.cpp:178:51: note: Returned allocated memory
  178 |                 Csv::table courselecturer_table = courselecturer.get_table().filter(__courselecturer_filter_courseID_func);
      |                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/lecturer.cpp:181:17: note: Loop condition is false. Execution continues on line 184
  181 |                 for (int i = 0; i < courselecturer_table.num_rows(); ++i)
      |                 ^
src/lecturer.cpp:184:17: note: Potential memory leak
  184 |                 Interface::print_table(lecturers.get_table().filter(__lecturers_filter_lecturerIDs_func),
      |                 ^
Suppressed 720 warnings (720 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
733 warnings generated.
include/csv.h:175:60: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                                                            ^
src/scoreboard.cpp:203:25: note: Assuming 'i' is >= 'Nrows'
  203 |         for (int i = 0; i < Nrows; ++i)
      |                         ^~~~~~~~~
src/scoreboard.cpp:203:9: note: Loop condition is false. Execution continues on line 205
  203 |         for (int i = 0; i < Nrows; ++i)
      |         ^
src/scoreboard.cpp:211:17: note: Assuming 'chosen' is >= 1
  211 |             if (chosen >= 1 && chosen <= Nrows)
      |                 ^~~~~~~~~~~
src/scoreboard.cpp:211:17: note: Left side of '&&' is true
src/scoreboard.cpp:211:32: note: Assuming 'chosen' is <= 'Nrows'
  211 |             if (chosen >= 1 && chosen <= Nrows)
      |                                ^~~~~~~~~~~~~~~
src/scoreboard.cpp:211:13: note: Taking true branch
  211 |             if (chosen >= 1 && chosen <= Nrows)
      |             ^
src/scoreboard.cpp:216:44: note: Calling 'multitype::append'
  216 |                 Csv::multitype csv_fname = courseID.append("-Scoreboard.csv");
      |                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:171:25: note: Calling 'multitype::to_str'
  171 |             Char *cur = to_str(),
      |                         ^~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking false branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:299:13: note: Taking false branch
  299 |             if (is_type("str"))
      |             ^
include/csv.h:301:13: note: Taking false branch
  301 |             if (is_type("double"))
      |             ^
include/csv.h:328:16: note: Storing uninitialized value
  328 |                         Pchar buf = new Char[1]; buf[0] = '\0';
      |                                     ^~~~~~~~~~~
include/csv.h:171:25: note: Returning from 'multitype::to_str'
  171 |             Char *cur = to_str(),
      |                         ^~~~~~~~
include/csv.h:175:29: note: Assuming the condition is true
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:175:13: note: Loop condition is true.  Entering loop body
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |             ^
include/csv.h:175:29: note: Assuming the condition is true
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:175:13: note: Loop condition is true.  Entering loop body
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |             ^
include/csv.h:175:60: note: Assigned value is garbage or undefined
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                                                            ^ ~~~~~~~~
include/csv.h:176:26: warning: Potential leak of memory pointed to by 'cur' [clang-analyzer-cplusplus.NewDeleteLeaks]
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                          ^
src/scoreboard.cpp:203:25: note: Assuming 'i' is >= 'Nrows'
  203 |         for (int i = 0; i < Nrows; ++i)
      |                         ^~~~~~~~~
src/scoreboard.cpp:203:9: note: Loop condition is false. Execution continues on line 205
  203 |         for (int i = 0; i < Nrows; ++i)
      |         ^
src/scoreboard.cpp:211:17: note: Assuming 'chosen' is >= 1
  211 |             if (chosen >= 1 && chosen <= Nrows)
      |                 ^~~~~~~~~~~
src/scoreboard.cpp:211:17: note: Left side of '&&' is true
src/scoreboard.cpp:211:32: note: Assuming 'chosen' is <= 'Nrows'
  211 |             if (chosen >= 1 && chosen <= Nrows)
      |                                ^~~~~~~~~~~~~~~
src/scoreboard.cpp:211:13: note: Taking true branch
  211 |             if (chosen >= 1 && chosen <= Nrows)
      |             ^
src/scoreboard.cpp:216:44: note: Calling 'multitype::append'
  216 |                 Csv::multitype csv_fname = courseID.append("-Scoreboard.csv");
      |                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:171:25: note: Calling 'multitype::to_str'
  171 |             Char *cur = to_str(),
      |                         ^~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking false branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:299:13: note: Taking false branch
  299 |             if (is_type("str"))
      |             ^
include/csv.h:301:13: note: Taking false branch
  301 |             if (is_type("double"))
      |             ^
include/csv.h:328:16: note: Memory is allocated
  328 |                         Pchar buf = new Char[1]; buf[0] = '\0';
      |                                     ^~~~~~~~~~~
include/csv.h:171:25: note: Returned allocated memory
  171 |             Char *cur = to_str(),
      |                         ^~~~~~~~
include/csv.h:175:29: note: Assuming the condition is false
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:175:13: note: Loop condition is false. Execution continues on line 176
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |             ^
include/csv.h:176:26: note: Potential leak of memory pointed to by 'cur'
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                          ^
include/csv.h:176:60: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                                                            ^
src/scoreboard.cpp:203:25: note: Assuming 'i' is >= 'Nrows'
  203 |         for (int i = 0; i < Nrows; ++i)
      |                         ^~~~~~~~~
src/scoreboard.cpp:203:9: note: Loop condition is false. Execution continues on line 205
  203 |         for (int i = 0; i < Nrows; ++i)
      |         ^
src/scoreboard.cpp:211:17: note: Assuming 'chosen' is >= 1
  211 |             if (chosen >= 1 && chosen <= Nrows)
      |                 ^~~~~~~~~~~
src/scoreboard.cpp:211:17: note: Left side of '&&' is true
src/scoreboard.cpp:211:32: note: Assuming 'chosen' is <= 'Nrows'
  211 |             if (chosen >= 1 && chosen <= Nrows)
      |                                ^~~~~~~~~~~~~~~
src/scoreboard.cpp:211:13: note: Taking true branch
  211 |             if (chosen >= 1 && chosen <= Nrows)
      |             ^
src/scoreboard.cpp:216:44: note: Calling 'multitype::append'
  216 |                 Csv::multitype csv_fname = courseID.append("-Scoreboard.csv");
      |                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:172:25: note: Calling 'multitype::to_str'
  172 |                  *app = e.to_str(),
      |                         ^~~~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking false branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:299:13: note: Taking false branch
  299 |             if (is_type("str"))
      |             ^
include/csv.h:301:13: note: Taking false branch
  301 |             if (is_type("double"))
      |             ^
include/csv.h:328:16: note: Storing uninitialized value
  328 |                         Pchar buf = new Char[1]; buf[0] = '\0';
      |                                     ^~~~~~~~~~~
include/csv.h:172:25: note: Returning from 'multitype::to_str'
  172 |                  *app = e.to_str(),
      |                         ^~~~~~~~~~
include/csv.h:175:29: note: Assuming the condition is false
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:175:13: note: Loop condition is false. Execution continues on line 176
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |             ^
include/csv.h:176:29: note: Assuming the condition is true
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:176:13: note: Loop condition is true.  Entering loop body
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |             ^
include/csv.h:176:29: note: Assuming the condition is true
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:176:13: note: Loop condition is true.  Entering loop body
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |             ^
include/csv.h:176:60: note: Assigned value is garbage or undefined
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                                                            ^ ~~~~~~~~
include/csv.h:177:22: warning: Potential leak of memory pointed to by 'app' [clang-analyzer-cplusplus.NewDeleteLeaks]
  177 |             res[j] = '\0';
      |                      ^
src/scoreboard.cpp:203:25: note: Assuming 'i' is >= 'Nrows'
  203 |         for (int i = 0; i < Nrows; ++i)
      |                         ^~~~~~~~~
src/scoreboard.cpp:203:9: note: Loop condition is false. Execution continues on line 205
  203 |         for (int i = 0; i < Nrows; ++i)
      |         ^
src/scoreboard.cpp:211:17: note: Assuming 'chosen' is >= 1
  211 |             if (chosen >= 1 && chosen <= Nrows)
      |                 ^~~~~~~~~~~
src/scoreboard.cpp:211:17: note: Left side of '&&' is true
src/scoreboard.cpp:211:32: note: Assuming 'chosen' is <= 'Nrows'
  211 |             if (chosen >= 1 && chosen <= Nrows)
      |                                ^~~~~~~~~~~~~~~
src/scoreboard.cpp:211:13: note: Taking true branch
  211 |             if (chosen >= 1 && chosen <= Nrows)
      |             ^
src/scoreboard.cpp:216:44: note: Calling 'multitype::append'
  216 |                 Csv::multitype csv_fname = courseID.append("-Scoreboard.csv");
      |                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:172:25: note: Calling 'multitype::to_str'
  172 |                  *app = e.to_str(),
      |                         ^~~~~~~~~~
include/csv.h:281:13: note: Taking false branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:287:13: note: Taking false branch
  287 |             if (is_type("long"))
      |             ^
include/csv.h:293:13: note: Taking true branch
  293 |             if (is_type("char"))
      |             ^
include/csv.h:295:29: note: Memory is allocated
  295 |                 Pchar buf = new Char[2];
      |                             ^~~~~~~~~~~
include/csv.h:172:25: note: Returned allocated memory
  172 |                  *app = e.to_str(),
      |                         ^~~~~~~~~~
include/csv.h:175:29: note: Assuming the condition is false
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:175:13: note: Loop condition is false. Execution continues on line 176
  175 |             for (Int i = 0; i < (Int)strlen(cur); res[j++] = cur[i++]);
      |             ^
include/csv.h:176:29: note: Assuming the condition is false
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:176:13: note: Loop condition is false. Execution continues on line 177
  176 |             for (Int i = 0; i < (Int)strlen(app); res[j++] = app[i++]);
      |             ^
include/csv.h:177:22: note: Potential leak of memory pointed to by 'app'
  177 |             res[j] = '\0';
      |                      ^
include/csv.h:404:17: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
  404 |                 return strcmp(values._tpchar, e.to_str()) == 0;
      |                 ^
src/scoreboard.cpp:203:25: note: Assuming 'i' is >= 'Nrows'
  203 |         for (int i = 0; i < Nrows; ++i)
      |                         ^~~~~~~~~
src/scoreboard.cpp:203:9: note: Loop condition is false. Execution continues on line 205
  203 |         for (int i = 0; i < Nrows; ++i)
      |         ^
src/scoreboard.cpp:211:17: note: Assuming 'chosen' is >= 1
  211 |             if (chosen >= 1 && chosen <= Nrows)
      |                 ^~~~~~~~~~~
src/scoreboard.cpp:211:17: note: Left side of '&&' is true
src/scoreboard.cpp:211:32: note: Assuming 'chosen' is <= 'Nrows'
  211 |             if (chosen >= 1 && chosen <= Nrows)
      |                                ^~~~~~~~~~~~~~~
src/scoreboard.cpp:211:13: note: Taking true branch
  211 |             if (chosen >= 1 && chosen <= Nrows)
      |             ^
src/scoreboard.cpp:220:17: note: Calling 'table::add_key'
  220 |                 out.get_table().add_key("Course ID");
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:601:17: note: Calling 'table::has_key'
  601 |             if (has_key(e))
      |                 ^~~~~~~~~~
include/csv.h:641:20: note: Calling 'table::get_key'
  641 |             return get_key(e) != -1;
      |                    ^~~~~~~~~~
include/csv.h:632:13: note: Loop condition is true.  Entering loop body
  632 |             for (Int i = 0; i < keys.size(); ++i)
      |             ^
include/csv.h:633:21: note: Calling 'multitype::strict_equal'
  633 |                 if (e.strict_equal(keys.at(i)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:395:13: note: Taking false branch
  395 |             if (!is_type(e.type()))
      |             ^
include/csv.h:397:13: note: Taking false branch
  397 |             if (is_type("int"))
      |             ^
include/csv.h:399:13: note: Taking false branch
  399 |             if (is_type("long"))
      |             ^
include/csv.h:401:13: note: Taking false branch
  401 |             if (is_type("char"))
      |             ^
include/csv.h:403:13: note: Taking true branch
  403 |             if (is_type("str"))
      |             ^
include/csv.h:404:47: note: Calling 'multitype::to_str'
  404 |                 return strcmp(values._tpchar, e.to_str()) == 0;
      |                                               ^~~~~~~~~~
include/csv.h:281:13: note: Taking true branch
  281 |             if (is_type("int"))
      |             ^
include/csv.h:283:29: note: Memory is allocated
  283 |                 Pchar buf = new Char[STR_BUFFER];
      |                             ^~~~~~~~~~~~~~~~~~~~
include/csv.h:404:47: note: Returned allocated memory
  404 |                 return strcmp(values._tpchar, e.to_str()) == 0;
      |                                               ^~~~~~~~~~
include/csv.h:404:24: note: Assuming the condition is false
  404 |                 return strcmp(values._tpchar, e.to_str()) == 0;
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:404:17: note: Potential memory leak
  404 |                 return strcmp(values._tpchar, e.to_str()) == 0;
      |                 ^
include/csv.h:482:13: warning: Memory allocated by 'new' should be deallocated by 'delete', not 'delete[]' [clang-analyzer-unix.MismatchedDeallocator]
  482 |             delete[] root->next;
      |             ^
src/scoreboard.cpp:33:25: note: Assuming 'i' is >= 'Nrows'
   33 |         for (int i = 0; i < Nrows; ++i)
      |                         ^~~~~~~~~
src/scoreboard.cpp:33:9: note: Loop condition is false. Execution continues on line 35
   33 |         for (int i = 0; i < Nrows; ++i)
      |         ^
src/scoreboard.cpp:41:17: note: Assuming 'chosen' is >= 1
   41 |             if (chosen >= 1 && chosen <= Nrows)
      |                 ^~~~~~~~~~~
src/scoreboard.cpp:41:17: note: Left side of '&&' is true
src/scoreboard.cpp:41:32: note: Assuming 'chosen' is <= 'Nrows'
   41 |             if (chosen >= 1 && chosen <= Nrows)
      |                                ^~~~~~~~~~~~~~~
src/scoreboard.cpp:41:13: note: Taking true branch
   41 |             if (chosen >= 1 && chosen <= Nrows)
      |             ^
src/scoreboard.cpp:50:17: note: Taking false branch
   50 |                 if (!csv.init_read())
      |                 ^
src/scoreboard.cpp:56:17: note: Calling 'csv_handler::read_and_terminate'
   56 |                 csv.read_and_terminate();
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:972:13: note: Taking false branch
  972 |             if (fptr == nullptr)
      |             ^
include/csv.h:974:13: note: Loop condition is false. Execution continues on line 976
  974 |             while (!csv_str.empty())
      |             ^
include/csv.h:981:22: note: Calling 'csv_handler::csv_read_char'
  981 |                 ch = csv_read_char();
      |                      ^~~~~~~~~~~~~~~
include/csv.h:904:17: note: Left side of '||' is false
  904 |             if (fptr == nullptr || feof(fptr))
      |                 ^
include/csv.h:904:36: note: Assuming the condition is false
  904 |             if (fptr == nullptr || feof(fptr))
      |                                    ^~~~~~~~~~
include/csv.h:904:13: note: Taking false branch
  904 |             if (fptr == nullptr || feof(fptr))
      |             ^
include/csv.h:907:17: note: Assuming the condition is false
  907 |             if (ch == EOF)
      |                 ^~~~~~~~~
include/csv.h:907:13: note: Taking false branch
  907 |             if (ch == EOF)
      |             ^
include/csv.h:914:17: note: Assuming 'ch' is >= 32
  914 |             if (ch >= 32 && ch <= 126)
      |                 ^~~~~~~~
include/csv.h:914:17: note: Left side of '&&' is true
include/csv.h:914:29: note: Assuming 'ch' is <= 126
  914 |             if (ch >= 32 && ch <= 126)
      |                             ^~~~~~~~~
include/csv.h:914:13: note: Taking true branch
  914 |             if (ch >= 32 && ch <= 126)
      |             ^
include/csv.h:915:17: note: Calling 'list::push_back'
  915 |                 csv_str.push_back((Char)ch);
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:456:13: note: Loop condition is false. Execution continues on line 458
  456 |             while (root->next != nullptr)
      |             ^
include/csv.h:458:26: note: Memory is allocated
  458 |             root->next = new iter();
      |                          ^~~~~~~~~~
include/csv.h:915:17: note: Returned allocated memory
  915 |                 csv_str.push_back((Char)ch);
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:981:22: note: Returned allocated memory
  981 |                 ch = csv_read_char();
      |                      ^~~~~~~~~~~~~~~
include/csv.h:982:21: note: Assuming 'ch' is equal to 'delim'
  982 |                 if (ch == delim)
      |                     ^~~~~~~~~~~
include/csv.h:982:17: note: Taking true branch
  982 |                 if (ch == delim)
      |                 ^
include/csv.h:983:21: note: Calling 'list::pop_back'
  983 |                     csv_str.pop_back();
      |                     ^~~~~~~~~~~~~~~~~~
include/csv.h:476:13: note: Taking false branch
  476 |             if (empty())
      |             ^
include/csv.h:479:20: note: Assuming the condition is false
  479 |             while (root->next->next != nullptr)
      |                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:479:13: note: Loop condition is false. Execution continues on line 481
  479 |             while (root->next->next != nullptr)
      |             ^
include/csv.h:482:13: note: Memory allocated by 'new' should be deallocated by 'delete', not 'delete[]'
  482 |             delete[] root->next;
      |             ^        ~~~~~~~~~~
include/csv.h:880:26: warning: Potential leak of memory pointed to by 'markCol' [clang-analyzer-cplusplus.NewDeleteLeaks]
  880 |             for (int i = 0; i < Nrows; ++i)
      |                          ^
src/scoreboard.cpp:170:43: note: Calling 'table::filter'
  170 |                     coursestudent_table = coursestudent.get_table().filter(__courses_filter_studentID_func);
      |                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:869:57: note: Memory is allocated
  869 |             bool *markRow = new bool[Nrows], *markCol = new bool[Nkeys];
      |                                                         ^~~~~~~~~~~~~~~
include/csv.h:872:29: note: Assuming 'i' is >= 'Nrows'
  872 |             for (int i = 0; i < Nrows; ++i)
      |                             ^~~~~~~~~
include/csv.h:872:13: note: Loop condition is false. Execution continues on line 876
  872 |             for (int i = 0; i < Nrows; ++i)
      |             ^
include/csv.h:877:29: note: Assuming 'i' is >= 'Nkeys'
  877 |             for (int i = 0; i < Nkeys; ++i)
      |                             ^~~~~~~~~
include/csv.h:877:13: note: Loop condition is false. Execution continues on line 880
  877 |             for (int i = 0; i < Nkeys; ++i)
      |             ^
include/csv.h:880:26: note: Potential leak of memory pointed to by 'markCol'
  880 |             for (int i = 0; i < Nrows; ++i)
      |                          ^
include/csv.h:887:20: warning: Potential leak of memory pointed to by 'markRow' [clang-analyzer-cplusplus.NewDeleteLeaks]
  887 |             return new_table;
      |                    ^
src/scoreboard.cpp:170:43: note: Calling 'table::filter'
  170 |                     coursestudent_table = coursestudent.get_table().filter(__courses_filter_studentID_func);
      |                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:869:29: note: Memory is allocated
  869 |             bool *markRow = new bool[Nrows], *markCol = new bool[Nkeys];
      |                             ^~~~~~~~~~~~~~~
include/csv.h:872:29: note: Assuming 'i' is >= 'Nrows'
  872 |             for (int i = 0; i < Nrows; ++i)
      |                             ^~~~~~~~~
include/csv.h:872:13: note: Loop condition is false. Execution continues on line 876
  872 |             for (int i = 0; i < Nrows; ++i)
      |             ^
include/csv.h:877:29: note: Assuming 'i' is >= 'Nkeys'
  877 |             for (int i = 0; i < Nkeys; ++i)
      |                             ^~~~~~~~~
include/csv.h:877:13: note: Loop condition is false. Execution continues on line 880
  877 |             for (int i = 0; i < Nkeys; ++i)
      |             ^
include/csv.h:880:29: note: 'i' is >= 'Nrows'
  880 |             for (int i = 0; i < Nrows; ++i)
      |                             ^
include/csv.h:880:13: note: Loop condition is false. Execution continues on line 887
  880 |             for (int i = 0; i < Nrows; ++i)
      |             ^
include/csv.h:887:20: note: Potential leak of memory pointed to by 'markRow'
  887 |             return new_table;
      |                    ^
include/csv.h:948:13: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
  948 |             string_copy(_filename, filename);
      |             ^
src/scoreboard.cpp:203:25: note: Assuming 'i' is >= 'Nrows'
  203 |         for (int i = 0; i < Nrows; ++i)
      |                         ^~~~~~~~~
src/scoreboard.cpp:203:9: note: Loop condition is false. Execution continues on line 205
  203 |         for (int i = 0; i < Nrows; ++i)
      |         ^
src/scoreboard.cpp:211:17: note: Assuming 'chosen' is >= 1
  211 |             if (chosen >= 1 && chosen <= Nrows)
      |                 ^~~~~~~~~~~
src/scoreboard.cpp:211:17: note: Left side of '&&' is true
src/scoreboard.cpp:211:32: note: Assuming 'chosen' is <= 'Nrows'
  211 |             if (chosen >= 1 && chosen <= Nrows)
      |                                ^~~~~~~~~~~~~~~
src/scoreboard.cpp:211:13: note: Taking true branch
  211 |             if (chosen >= 1 && chosen <= Nrows)
      |             ^
src/scoreboard.cpp:217:34: note: Calling constructor for 'csv_handler'
  217 |                 Csv::csv_handler out(csv_fname.to_str());
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:945:9: note: Calling default constructor for 'table'
  945 |         csv_handler (const Pchar _filename)
      |         ^~~~~~~~~~~
include/csv.h:594:20: note: Memory is allocated
  594 |             rows = new plist();
      |                    ^~~~~~~~~~~
include/csv.h:945:9: note: Returning from default constructor for 'table'
  945 |         csv_handler (const Pchar _filename)
      |         ^~~~~~~~~~~
include/csv.h:948:13: note: Potential memory leak
  948 |             string_copy(_filename, filename);
      |             ^
src/scoreboard.cpp:193:5: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
  193 |     }
      |     ^
src/scoreboard.cpp:170:43: note: Calling 'table::filter'
  170 |                     coursestudent_table = coursestudent.get_table().filter(__courses_filter_studentID_func);
      |                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:872:29: note: Assuming 'i' is >= 'Nrows'
  872 |             for (int i = 0; i < Nrows; ++i)
      |                             ^~~~~~~~~
include/csv.h:872:13: note: Loop condition is false. Execution continues on line 876
  872 |             for (int i = 0; i < Nrows; ++i)
      |             ^
include/csv.h:876:19: note: Calling default constructor for 'table'
  876 |             table new_table;
      |                   ^~~~~~~~~
include/csv.h:594:20: note: Memory is allocated
  594 |             rows = new plist();
      |                    ^~~~~~~~~~~
include/csv.h:876:19: note: Returning from default constructor for 'table'
  876 |             table new_table;
      |                   ^~~~~~~~~
include/csv.h:877:13: note: Loop condition is false. Execution continues on line 880
  877 |             for (int i = 0; i < Nkeys; ++i)
      |             ^
include/csv.h:880:29: note: 'i' is >= 'Nrows'
  880 |             for (int i = 0; i < Nrows; ++i)
      |                             ^
include/csv.h:880:13: note: Loop condition is false. Execution continues on line 887
  880 |             for (int i = 0; i < Nrows; ++i)
      |             ^
src/scoreboard.cpp:170:43: note: Returned allocated memory
  170 |                     coursestudent_table = coursestudent.get_table().filter(__courses_filter_studentID_func);
      |                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/scoreboard.cpp:175:9: note: Loop condition is false. Execution continues on line 177
  175 |         for (int i = 0; i < Nrows; ++i)
      |         ^
src/scoreboard.cpp:183:17: note: Assuming 'chosen' is >= 1
  183 |             if (chosen >= 1 && chosen <= Nrows)
      |                 ^~~~~~~~~~~
src/scoreboard.cpp:183:17: note: Left side of '&&' is true
src/scoreboard.cpp:183:32: note: 'chosen' is > 'Nrows'
  183 |             if (chosen >= 1 && chosen <= Nrows)
      |                                ^~~~~~
src/scoreboard.cpp:183:13: note: Taking false branch
  183 |             if (chosen >= 1 && chosen <= Nrows)
      |             ^
src/scoreboard.cpp:192:16: note: Assuming the condition is false
  192 |         while (chosen != Nrows + 1);
      |                ^~~~~~~~~~~~~~~~~~~
src/scoreboard.cpp:180:9: note: Loop condition is false.  Exiting loop
  180 |         do
      |         ^
src/scoreboard.cpp:193:5: note: Potential memory leak
  193 |     }
      |     ^
src/scoreboard.cpp:204:13: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
  204 |             select.add_item(i + 1, courses_table.get_row(i).at(0));
      |             ^
src/scoreboard.cpp:203:25: note: Assuming 'i' is < 'Nrows'
  203 |         for (int i = 0; i < Nrows; ++i)
      |                         ^~~~~~~~~
src/scoreboard.cpp:203:9: note: Loop condition is true.  Entering loop body
  203 |         for (int i = 0; i < Nrows; ++i)
      |         ^
src/scoreboard.cpp:204:36: note: Calling 'table::get_row'
  204 |             select.add_item(i + 1, courses_table.get_row(i).at(0));
      |                                    ^~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:726:17: note: 'row' is >= 0
  726 |             if (row < 0 || row >= _num_rows)
      |                 ^~~
include/csv.h:726:17: note: Left side of '||' is false
include/csv.h:726:28: note: 'row' is < field '_num_rows'
  726 |             if (row < 0 || row >= _num_rows)
      |                            ^~~
include/csv.h:726:13: note: Taking false branch
  726 |             if (row < 0 || row >= _num_rows)
      |             ^
include/csv.h:729:26: note: Left side of '&&' is false
  729 |             while (row-- && head->next != nullptr)
      |                          ^
include/csv.h:731:11: note: Assuming the condition is false
  731 |                         return head->next != nullptr ? head->next->value : *new list<multitype>();
      |                                ^~~~~~~~~~~~~~~~~~~~~
include/csv.h:731:11: note: '?' condition is false
include/csv.h:731:56: note: Memory is allocated
  731 |                         return head->next != nullptr ? head->next->value : *new list<multitype>();
      |                                                                             ^~~~~~~~~~~~~~~~~~~~~
src/scoreboard.cpp:204:36: note: Returned allocated memory
  204 |             select.add_item(i + 1, courses_table.get_row(i).at(0));
      |                                    ^~~~~~~~~~~~~~~~~~~~~~~~
src/scoreboard.cpp:204:13: note: Potential memory leak
  204 |             select.add_item(i + 1, courses_table.get_row(i).at(0));
      |             ^
src/scoreboard.cpp:213:43: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
  213 |                 Csv::multitype courseID = courses_table.get_row(chosen - 1).at(0);
      |                                           ^
src/scoreboard.cpp:203:25: note: Assuming 'i' is >= 'Nrows'
  203 |         for (int i = 0; i < Nrows; ++i)
      |                         ^~~~~~~~~
src/scoreboard.cpp:203:9: note: Loop condition is false. Execution continues on line 205
  203 |         for (int i = 0; i < Nrows; ++i)
      |         ^
src/scoreboard.cpp:211:17: note: Assuming 'chosen' is >= 1
  211 |             if (chosen >= 1 && chosen <= Nrows)
      |                 ^~~~~~~~~~~
src/scoreboard.cpp:211:17: note: Left side of '&&' is true
src/scoreboard.cpp:211:32: note: Assuming 'chosen' is <= 'Nrows'
  211 |             if (chosen >= 1 && chosen <= Nrows)
      |                                ^~~~~~~~~~~~~~~
src/scoreboard.cpp:211:13: note: Taking true branch
  211 |             if (chosen >= 1 && chosen <= Nrows)
      |             ^
src/scoreboard.cpp:213:43: note: Calling 'table::get_row'
  213 |                 Csv::multitype courseID = courses_table.get_row(chosen - 1).at(0);
      |                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:726:17: note: 'row' is >= 0
  726 |             if (row < 0 || row >= _num_rows)
      |                 ^~~
include/csv.h:726:17: note: Left side of '||' is false
include/csv.h:726:28: note: Assuming 'row' is >= field '_num_rows'
  726 |             if (row < 0 || row >= _num_rows)
      |                            ^~~~~~~~~~~~~~~~
include/csv.h:726:13: note: Taking true branch
  726 |             if (row < 0 || row >= _num_rows)
      |             ^
include/csv.h:727:25: note: Memory is allocated
  727 |                 return *new list<multitype>();
      |                         ^~~~~~~~~~~~~~~~~~~~~
src/scoreboard.cpp:213:43: note: Returned allocated memory
  213 |                 Csv::multitype courseID = courses_table.get_row(chosen - 1).at(0);
      |                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/scoreboard.cpp:213:43: note: Potential memory leak
src/scoreboard.cpp:226:21: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
  226 |                     return;
      |                     ^
src/scoreboard.cpp:203:25: note: Assuming 'i' is >= 'Nrows'
  203 |         for (int i = 0; i < Nrows; ++i)
      |                         ^~~~~~~~~
src/scoreboard.cpp:203:9: note: Loop condition is false. Execution continues on line 205
  203 |         for (int i = 0; i < Nrows; ++i)
      |         ^
src/scoreboard.cpp:211:17: note: Assuming 'chosen' is >= 1
  211 |             if (chosen >= 1 && chosen <= Nrows)
      |                 ^~~~~~~~~~~
src/scoreboard.cpp:211:17: note: Left side of '&&' is true
src/scoreboard.cpp:211:32: note: Assuming 'chosen' is <= 'Nrows'
  211 |             if (chosen >= 1 && chosen <= Nrows)
      |                                ^~~~~~~~~~~~~~~
src/scoreboard.cpp:211:13: note: Taking true branch
  211 |             if (chosen >= 1 && chosen <= Nrows)
      |             ^
src/scoreboard.cpp:218:35: note: Calling 'table::filter'
  218 |                 out.get_table() = scoreboard_table.filter(__scoreboard_filter_courseID_func);
      |                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/csv.h:872:29: note: Assuming 'i' is >= 'Nrows'
  872 |             for (int i = 0; i < Nrows; ++i)
      |                             ^~~~~~~~~
include/csv.h:872:13: note: Loop condition is false. Execution continues on line 876
  872 |             for (int i = 0; i < Nrows; ++i)
      |             ^
include/csv.h:876:19: note: Calling default constructor for 'table'
  876 |             table new_table;
      |                   ^~~~~~~~~
include/csv.h:594:20: note: Memory is allocated
  594 |             rows = new plist();
      |                    ^~~~~~~~~~~
include/csv.h:876:19: note: Returning from default constructor for 'table'
  876 |             table new_table;
      |                   ^~~~~~~~~
include/csv.h:877:13: note: Loop condition is false. Execution continues on line 880
  877 |             for (int i = 0; i < Nkeys; ++i)
      |             ^
include/csv.h:880:29: note: 'i' is >= 'Nrows'
  880 |             for (int i = 0; i < Nrows; ++i)
      |                             ^
include/csv.h:880:13: note: Loop condition is false. Execution continues on line 887
  880 |             for (int i = 0; i < Nrows; ++i)
      |             ^
src/scoreboard.cpp:218:35: note: Returned allocated memory
  218 |                 out.get_table() = scoreboard_table.filter(__scoreboard_filter_courseID_func);
      |                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/scoreboard.cpp:225:17: note: Taking true branch
  225 |                 if (!out.init_write())
      |                 ^
src/scoreboard.cpp:226:21: note: Potential memory leak
  226 |                     return;
      |                     ^
Suppressed 720 warnings (720 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
